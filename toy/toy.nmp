let proc = "toy"
let bit_order = "uppermost"
let gliss_isize = "16"

let REG_BITS = 4
let REG_CNT = 1<<REG_BITS
let WORD_SIZE = 16

type word = card(WORD_SIZE)
type byte = card(8)
type rindex = card(REG_BITS)

reg PC[1, word] pc=1
reg R[REG_CNT, word]

mem M[WORD_SIZE, byte]
mem M16[WORD_SIZE / 2, word] alias = M[0]

mode reg_mode(i: rindex) = R[i]
	syntax = format("r%d", i)
	image = format("%4b", i)

mode reg0_mode(i: rindex) = if i == 0 then 0 else R[i] endif
	syntax = if i == 0 then "zero" else format("r%d", i) endif
	image = format("%4b", i)

op instruction(x: allinstr)
	syntax = x.syntax
	image = x.image
	action = { x.action; PC = PC + 2; }

op allinstr = set | add | ifeq

op set(r: reg_mode, imm: int(8))
	syntax = format("set %s, #%d", r, imm)
	image = format("0000 %s %8b", r, imm)
	action = { r = imm; }

op add(d: reg_mode, s1: reg_mode, s2: reg_mode)
	syntax = format("add %s, %s, %s", d, s1, s2)
	image = format("0001 %s %s %s", d, s1, s2)
	action = { d = s1 + s2; }

op ifeq(r1: reg_mode, r2: reg0_mode, off: int(3))
	syntax = format("beq %s, %s, %d", r1, r2, __IADDR + off << 1)
	image = format("0010 %s %s %4b", r1, r2, off)
	action = { if r1 == r2 then PC = PC + off << 1; endif; }

