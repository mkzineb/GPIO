
let component = "TIM"
let arch = "stm32"
let author="H. Cass√©"
let license = "GPL"
let copyright = "University of Toulouse 3"
let date = "06/05/2023"
let name = format("GPIO%d", CNUM)

type bit = card(1)
type word = card(32)
type half = card(16)

let UIF = 0
let CEN = 0

reg last(1, word)
	intern = 1		// Indique que ce registre n'est pas accessible
					// par le programme.
	init = 0		// Donne la valeur initiale

reg running(1, bit)
	intern = 1
	init = 1

reg CR1(1, word)
	offset = 0x00
	init = 0

reg SR(1, word)
	offset = 0x10
	init = 0

reg ARR(1, half)
	offset = 0x2C
	init = 0

reg CNT(1, half)
	offset = 0x24

event Update
	on_update = {
		if CR1<CEN..CEN> == 0 then
			if running then
				cancel Update;
				CNT = now - last;
			endif;
			running = 0;
		else
			if ARR <= CNT then
				SR<UIF..UIF> = 1;
				CNT = 0;
			endif;
			schedule Update in ARR - CNT;
			running = 1;
		endif;
	}
	on_trigger = {
		SR<UIF..UIF> = 1;
		CNT = 0;
		schedule Update in ARR;
		last = now;
	}
