type token =
  | ID of (string)
  | BIN_CONST of (Int32.t * int)
  | BIN_CONST_64 of (Int64.t * int)
  | CARD_CONST of (Int32.t)
  | CARD_CONST_64 of (Int64.t)
  | FIXED_CONST of (float)
  | STRING_CONST of (string)
  | DOLLAR
  | ACTION
  | ALIAS
  | ATTR
  | BOOL
  | CANON
  | CARD
  | CASE
  | COERCE
  | DEFAULT
  | DO
  | ELSE
  | ELSIF
  | ENDDO
  | ENDIF
  | ENUM
  | ERROR
  | EXTEND
  | FIX
  | FLOAT
  | FOR
  | FORMAT
  | IF
  | IN
  | IMAGE
  | INITIALA
  | INT
  | LET of (int)
  | MEM of (int)
  | MODE of (int)
  | OP of (int)
  | REG of (int)
  | SWITCH
  | SYNTAX
  | THEN
  | TYPE of (int)
  | VAR of (int)
  | VOLATILE
  | PORTS
  | PORT of (int)
  | RESOURCE of (int)
  | USES
  | EXCEPTION of (int)
  | MACRO
  | EOF
  | NOT
  | OR
  | AND
  | LEQ
  | GEQ
  | EQU
  | NEQ
  | LEFT_SHIFT
  | RIGHT_SHIFT
  | DOUBLE_STAR
  | ROTATE_RIGHT
  | ROTATE_LEFT
  | DOUBLE_COLON
  | DOUBLE_DOT
  | BIT_LEFT
  | BIT_RIGHT
  | EQ
  | EXCLAM
  | PIPE
  | CIRC
  | AMPERS
  | GT
  | LT
  | SHARP
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | TILD
  | COLON
  | COMMA
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | LPAREN
  | RPAREN
  | SEMI
  | DOT
  | AROBAS

open Parsing;;
let _ = parse_error;;
# 24 "parser.mly"
open Printf

let eline e = Irg.ELINE (!(Lexer.file), !(Lexer.line), e)
let line s = Irg.LINE (!(Lexer.file), !(Lexer.line), s)
let in_format = ref false
let do_sanity = ref false

(** Raise an error at the current parsing position.
	@param f	Function to display error. *)
let error f =
		raise (Irg.Error (fun out -> Printf.fprintf out "%s:%d: " !(Lexer.file) !(Lexer.line); f out))


(** Check if all parameters and attributes has been cleaned up after a
	a specification.
	@param Name of the specificiation. *)
let sanity_check name =
	if !do_sanity then
		let supported_params = ["__IADDR"; "__ISIZE" ] in
		if Irg.fold
			(fun id s r -> r ||
				(match s with
				| Irg.ATTR _ ->
					fprintf stderr "SANITY: attribute %s of %s not cleaned\n" id name; true
				| Irg.PARAM (aid, _) when not (List.mem aid supported_params) ->
					fprintf stderr "SANITY: parameter %s of %s not cleaned\n" id name; true
				| _ ->
					false))
			false
		then error (Irg.asis "Stopping.")


(** Handle an expression in the parser, i.e. put source file/line information
	or add file/line information when an error is raised.
	@param f			Function to perform expression building. It is called with () argument.
	@return				Built expression.
	@raise Irg.Error	If there is an error. *)
let handle_expr f =
	try
		Irg.ELINE (!(Lexer.file), !(Lexer.line), f ())
	with Irg.PreError ef ->
		error ef


(** Handle an statement in the parser, i.e. put source file/line information
	or add file/line information when an error is raised.
	@param f			Function to perform statement building. It is called with () argument.
	@return				Built statement.
	@raise Irg.Error	If there is an error. *)
let handle_stat f =
	try
		Irg.LINE (!(Lexer.file), !(Lexer.line), f ())
	with Irg.PreError ef ->
		error ef


(** Raise a syntax error exception.
	@param msg	Error message.
	@raise Irg.SyntaxError	Syntax error. *)
let syntax_error msg =
	raise (Irg.SyntaxError msg)


(** Intersect parameter declaration.
	@param pars1		First list of parameters.
	@param pars2		Second list of parameters.
	@return				Intersection of lists. *)
let intersect_params pars1 pars2 : (string * Irg.typ) list =
	List.fold_left
		(fun res par -> if List.mem par pars1 then par::res else res)
		[]
		pars2


(** Intersect two list of attributes to provide a common context for
	extending a list of symbols.
	@param attrs1		First list of symbols.
	@param attrs2		Second list of symbols.
	@return				Intersection of both lists. *)
let intersect_attrs attrs1 attrs2 =
	let equal attr1 attr2 =
		match (attr1, attr2) with
		| (Irg.ATTR_EXPR (n1, _), Irg.ATTR_EXPR (n2, _))
		| (Irg.ATTR_LOC (n1, _), Irg.ATTR_LOC (n2, _))
		| (Irg.ATTR_STAT (n1, _), Irg.ATTR_STAT (n2, _)) when n1 = n2 -> true
		| _ -> false in
	let member_of attr attrs = List.exists (fun item -> equal attr item) attrs in
	List.fold_left (fun res attr -> if member_of attr attrs2 then attr::res else res) [] attrs1


(** Join two extension descriptions (names, parameters, attributes).
	@param e1	First extension description.
	@param e2	Second extension description.
	@return		Joined extension description. *)
let join_extend e1 e2 =
	let (i1, p1, a1) = e1 in
	let (i2, p2, a2) = e2 in
	(i1 @ i2, intersect_params p1 p2, intersect_attrs a1 a2)


(** Null extension description. *)
let null_extend = ([], [], [])


(** Get information to extend the symbol x.
	@param x				Name of the symbol to extend (must an AND-op or an AND-mode).
	@return					(specification of the symbol, list of parameters, list of attributes)
	@raise Irg.Error		If the symbol is not extensible. *)
let rec get_spec_extend x =
	let sym = Irg.get_symbol x in
	match sym with
	| Irg.UNDEF ->
		Irg.error (Irg.asis (Printf.sprintf "symbol %s does not exists" x))
	| Irg.AND_MODE (_, pars, _, attrs)
	| Irg.AND_OP (_, pars, attrs) ->
		([sym], pars, attrs)
	| Irg.OR_OP (_, xs, atts)
	| Irg.OR_MODE (_, xs, atts) ->
		List.fold_left (fun e x -> join_extend e (get_spec_extend x)) null_extend xs 
	| _ ->
		Irg.error (Irg.asis (Printf.sprintf "can not extend %s" x))


(** Raise a syntax error with the given message.
	@param m	Message of the syntax error. *)
(*let syntax_error m =
	raise (Irg.SyntaxError m)*)


(** Raise illegal-keyword exception. *)
let illegal _ =
	syntax_error "illegal keyword here"


(** Automaton to handle top-level if. *)
type top_if_auto = IN_THEN | IN_ELSE


(** Stack of top-level if automaton to manage  top-level ifs. *)
let top_if_stack: top_if_auto list ref = ref []


(** Manage a top-if: evaluate the condition and drive the parsing
	according to the result.
	@param e	If condition. *)
let top_if e =
	try
		if Sem.is_true (Sem.eval_const e) then
			top_if_stack := IN_THEN :: !top_if_stack
		else
			if Lexer.consume_then syntax_error
			then ()
			else top_if_stack := IN_ELSE :: !top_if_stack
	with Irg.Error _ ->
		syntax_error "'if' expressions should evaluate to constant!"


(** Manage a top-level else. *)
let top_else _ =
	match !top_if_stack with
	| [] ->
		syntax_error "'else' out of 'if'"
	| IN_ELSE :: _ ->
		syntax_error "duplicated 'else'"
	| IN_THEN :: t	->
		top_if_stack := t;
		Lexer.consume_else syntax_error
	

(** Manage a top-level endif. *)
let top_endif _ =
	match !top_if_stack with
	| [] ->
		syntax_error "'endif' out of 'if'"
	| IN_THEN :: t
	| IN_ELSE :: t ->
		top_if_stack := t
		
(** Manage a top-level elsif.
    @param e    Elif condition. *)
let top_elsif _ = 
    match !top_if_stack with
    | [] ->
        syntax_error "'elsif' out of 'if'"
    | IN_ELSE :: _ ->
        syntax_error "'elsif' after 'else'"
    | IN_THEN :: t ->
        top_if_stack := t;
        Lexer.consume_elsif syntax_error

# 290 "parser.ml"
let yytransl_const = [|
  264 (* DOLLAR *);
  265 (* ACTION *);
  266 (* ALIAS *);
  267 (* ATTR *);
  268 (* BOOL *);
  269 (* CANON *);
  270 (* CARD *);
  271 (* CASE *);
  272 (* COERCE *);
  273 (* DEFAULT *);
  274 (* DO *);
  275 (* ELSE *);
  276 (* ELSIF *);
  277 (* ENDDO *);
  278 (* ENDIF *);
  279 (* ENUM *);
  280 (* ERROR *);
  281 (* EXTEND *);
  282 (* FIX *);
  283 (* FLOAT *);
  284 (* FOR *);
  285 (* FORMAT *);
  286 (* IF *);
  287 (* IN *);
  288 (* IMAGE *);
  289 (* INITIALA *);
  290 (* INT *);
  296 (* SWITCH *);
  297 (* SYNTAX *);
  298 (* THEN *);
  301 (* VOLATILE *);
  302 (* PORTS *);
  305 (* USES *);
  307 (* MACRO *);
    0 (* EOF *);
  308 (* NOT *);
  309 (* OR *);
  310 (* AND *);
  311 (* LEQ *);
  312 (* GEQ *);
  313 (* EQU *);
  314 (* NEQ *);
  315 (* LEFT_SHIFT *);
  316 (* RIGHT_SHIFT *);
  317 (* DOUBLE_STAR *);
  318 (* ROTATE_RIGHT *);
  319 (* ROTATE_LEFT *);
  320 (* DOUBLE_COLON *);
  321 (* DOUBLE_DOT *);
  322 (* BIT_LEFT *);
  323 (* BIT_RIGHT *);
  324 (* EQ *);
  325 (* EXCLAM *);
  326 (* PIPE *);
  327 (* CIRC *);
  328 (* AMPERS *);
  329 (* GT *);
  330 (* LT *);
  331 (* SHARP *);
  332 (* PLUS *);
  333 (* MINUS *);
  334 (* STAR *);
  335 (* SLASH *);
  336 (* PERCENT *);
  337 (* TILD *);
  338 (* COLON *);
  339 (* COMMA *);
  340 (* LBRACE *);
  341 (* RBRACE *);
  342 (* LBRACK *);
  343 (* RBRACK *);
  344 (* LPAREN *);
  345 (* RPAREN *);
  346 (* SEMI *);
  347 (* DOT *);
  348 (* AROBAS *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* BIN_CONST *);
  259 (* BIN_CONST_64 *);
  260 (* CARD_CONST *);
  261 (* CARD_CONST_64 *);
  262 (* FIXED_CONST *);
  263 (* STRING_CONST *);
  291 (* LET *);
  292 (* MEM *);
  293 (* MODE *);
  294 (* OP *);
  295 (* REG *);
  299 (* TYPE *);
  300 (* VAR *);
  303 (* PORT *);
  304 (* RESOURCE *);
  306 (* EXCEPTION *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\002\000\002\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
\018\000\018\000\012\000\021\000\021\000\022\000\022\000\015\000\
\015\000\015\000\015\000\015\000\023\000\023\000\024\000\024\000\
\013\000\025\000\025\000\006\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\027\000\027\000\028\000\
\028\000\019\000\007\000\031\000\008\000\033\000\009\000\017\000\
\029\000\029\000\032\000\032\000\034\000\034\000\020\000\020\000\
\030\000\030\000\035\000\035\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\038\000\038\000\040\000\040\000\010\000\
\010\000\043\000\043\000\011\000\011\000\011\000\014\000\046\000\
\047\000\047\000\045\000\045\000\042\000\042\000\042\000\048\000\
\049\000\049\000\044\000\044\000\050\000\050\000\051\000\051\000\
\051\000\051\000\051\000\052\000\052\000\052\000\052\000\039\000\
\039\000\053\000\053\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\058\000\058\000\057\000\057\000\057\000\059\000\059\000\
\055\000\055\000\055\000\055\000\055\000\055\000\056\000\056\000\
\056\000\056\000\060\000\060\000\061\000\061\000\063\000\063\000\
\062\000\062\000\065\000\064\000\066\000\067\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\069\000\069\000\
\069\000\069\000\069\000\069\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\068\000\068\000\071\000\
\071\000\070\000\070\000\073\000\072\000\037\000\037\000\074\000\
\074\000\075\000\075\000\077\000\077\000\076\000\076\000\076\000\
\076\000\076\000\078\000\078\000\080\000\081\000\081\000\081\000\
\082\000\082\000\084\000\084\000\083\000\083\000\085\000\085\000\
\086\000\086\000\079\000\079\000\087\000\087\000\088\000\088\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\001\000\003\000\001\000\002\000\002\000\001\000\005\000\007\000\
\000\000\001\000\002\000\001\000\003\000\001\000\004\000\005\000\
\006\000\004\000\005\000\003\000\001\000\003\000\001\000\003\000\
\002\000\001\000\003\000\004\000\001\000\004\000\002\000\004\000\
\002\000\006\000\006\000\005\000\004\000\001\000\003\000\001\000\
\003\000\001\000\006\000\005\000\002\000\005\000\002\000\006\000\
\003\000\001\000\003\000\001\000\003\000\001\000\001\000\001\000\
\000\000\001\000\001\000\002\000\003\000\003\000\005\000\003\000\
\003\000\003\000\005\000\001\000\006\000\001\000\004\000\007\000\
\004\000\000\000\002\000\006\000\004\000\003\000\002\000\002\000\
\001\000\003\000\001\000\003\000\000\000\001\000\003\000\003\000\
\001\000\001\000\000\000\001\000\001\000\002\000\003\000\005\000\
\003\000\002\000\003\000\001\000\001\000\001\000\001\000\000\000\
\002\000\001\000\003\000\000\000\001\000\001\000\002\000\003\000\
\003\000\003\000\001\000\004\000\004\000\004\000\006\000\003\000\
\004\000\006\000\008\000\000\000\001\000\003\000\000\000\005\000\
\001\000\006\000\004\000\009\000\003\000\003\000\006\000\006\000\
\010\000\007\000\000\000\002\000\001\000\003\000\000\000\001\000\
\001\000\002\000\004\000\003\000\000\000\000\000\006\000\002\000\
\008\000\002\000\004\000\003\000\003\000\003\000\003\000\001\000\
\002\000\004\000\003\000\006\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\002\000\003\000\003\000\003\000\002\000\003\000\
\007\000\007\000\002\000\007\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\001\000\001\000\001\000\003\000\000\000\
\001\000\001\000\002\000\004\000\003\000\001\000\003\000\001\000\
\003\000\001\000\006\000\000\000\002\000\001\000\003\000\003\000\
\005\000\005\000\001\000\004\000\002\000\000\000\002\000\002\000\
\004\000\007\000\002\000\007\000\000\000\002\000\000\000\004\000\
\001\000\001\000\001\000\003\000\002\000\006\000\000\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\017\000\000\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\001\000\000\003\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\022\000\000\000\000\000\000\000\072\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\218\000\219\000\216\000\217\000\215\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\214\000\097\000\000\000\020\000\000\000\026\000\
\000\000\002\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\028\000\042\000\000\000\001\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\000\000\075\000\063\000\119\000\118\000\117\000\116\000\000\000\
\095\000\000\000\109\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\177\000\
\000\000\000\000\168\000\000\000\170\000\000\000\211\000\000\000\
\213\000\000\000\000\000\000\000\000\000\000\000\207\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\000\000\000\000\000\000\000\000\000\094\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\000\
\110\000\114\000\000\000\000\000\034\000\000\000\039\000\000\000\
\037\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\179\000\000\000\174\000\173\000\172\000\000\000\
\000\000\000\000\000\000\000\000\000\000\208\000\206\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\221\000\236\000\235\000\237\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\098\000\000\000\
\000\000\000\000\000\000\099\000\000\000\000\000\000\000\102\000\
\000\000\000\000\000\000\000\000\068\000\000\000\044\000\000\000\
\000\000\070\000\000\000\000\000\029\000\043\000\000\000\000\000\
\000\000\081\000\000\000\078\000\077\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\248\000\250\000\254\000\000\000\
\003\001\019\001\000\000\113\000\000\000\000\000\000\000\000\000\
\032\000\048\000\000\000\000\000\053\000\000\000\000\000\046\000\
\000\000\035\000\000\000\178\000\000\000\171\000\000\000\165\000\
\000\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\000\000\000\000\062\000\031\000\000\000\
\000\000\125\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\122\000\000\000\131\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\001\000\000\
\000\000\000\000\040\000\038\000\057\000\055\000\000\000\000\000\
\052\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\000\059\000\100\000\106\000\
\105\000\104\000\103\000\000\000\000\000\092\000\067\000\064\000\
\069\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\079\000\000\000\000\000\255\000\
\000\000\000\000\000\001\000\000\249\000\000\000\000\000\000\000\
\020\001\000\000\017\001\018\001\011\001\000\000\007\001\000\000\
\008\001\112\000\050\000\051\000\167\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\242\000\180\000\024\000\000\000\
\088\000\000\000\000\000\129\000\128\000\000\000\000\000\000\000\
\000\000\000\000\136\000\000\000\000\000\000\000\150\000\123\000\
\149\000\000\000\000\000\087\000\000\000\000\000\000\000\000\000\
\000\000\004\001\000\000\000\000\000\000\000\000\000\000\166\000\
\209\000\210\000\000\000\212\000\243\000\000\000\000\000\000\000\
\000\000\132\000\133\000\000\000\000\000\000\000\000\000\000\000\
\000\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\001\002\001\009\001\000\000\000\000\169\000\000\000\000\000\
\000\000\239\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\085\000\144\000\024\001\022\001\253\000\
\251\000\000\000\000\000\000\000\000\000\146\000\000\000\000\000\
\000\000\156\000\000\000\151\000\152\000\000\000\000\000\000\000\
\000\000\000\000\161\000\000\000\000\000\000\000\000\000\000\000\
\000\000\154\000\162\000\000\000\000\000\010\001\012\001\000\000\
\000\000\000\000\000\000\000\000\000\000\158\000\148\000\000\000\
\163\000\164\000\153\000"

let yydgoto = "\002\000\
\021\000\022\000\190\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\116\000\
\035\000\073\000\195\000\191\000\084\000\085\000\192\000\193\000\
\087\000\049\000\196\000\197\000\251\000\096\000\036\000\006\001\
\037\000\011\001\097\000\098\000\027\001\018\001\097\001\019\001\
\236\000\255\000\157\001\105\000\253\000\038\000\069\000\000\001\
\154\001\106\000\107\000\108\000\098\001\099\001\100\001\101\001\
\209\000\102\001\109\001\033\002\056\002\057\002\058\002\069\002\
\059\002\133\001\022\002\210\001\067\000\211\001\212\001\255\001\
\213\001\028\001\029\001\030\001\016\002\031\001\032\001\033\001\
\119\001\120\001\199\001\121\001\201\001\197\001\034\001\014\002"

let yysindex = "\032\000\
\062\018\000\000\172\009\000\000\249\016\000\000\033\255\052\255\
\249\016\245\254\144\255\144\255\144\255\144\255\156\255\144\255\
\144\255\144\255\144\255\144\255\000\000\252\014\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\000\130\000\104\000\000\000\087\255\
\000\000\011\255\099\255\102\255\116\255\146\255\249\016\252\255\
\000\000\162\000\000\000\000\000\000\000\000\000\000\000\185\255\
\012\255\030\255\208\255\031\255\249\016\249\016\249\016\249\016\
\102\016\091\017\000\000\000\000\198\255\000\000\124\017\000\000\
\144\255\000\000\196\255\134\255\009\255\214\255\000\000\246\255\
\236\255\007\000\238\255\014\000\000\000\000\000\039\000\000\000\
\000\000\066\000\075\000\079\000\084\000\087\000\097\000\000\000\
\130\000\000\000\000\000\000\000\000\000\000\000\000\000\101\000\
\000\000\104\000\000\000\161\255\244\255\000\000\249\016\249\016\
\249\016\249\016\249\016\084\020\058\000\051\000\119\016\000\000\
\014\255\249\016\000\000\151\008\000\000\163\000\000\000\157\017\
\000\000\249\016\068\013\107\000\107\000\107\000\000\000\032\255\
\000\000\249\016\249\016\249\016\249\016\249\016\249\016\249\016\
\249\016\249\016\249\016\249\016\249\016\159\255\249\016\249\016\
\249\016\249\016\249\016\249\016\249\016\249\016\249\016\249\016\
\181\000\000\000\239\254\249\016\183\000\191\000\000\000\183\000\
\191\000\207\016\216\255\207\016\207\016\196\000\144\255\144\255\
\151\016\202\000\249\016\249\016\206\000\083\255\000\000\083\255\
\000\000\000\000\188\011\000\000\000\000\131\000\000\000\191\255\
\000\000\125\000\182\000\243\255\000\000\169\000\172\000\173\000\
\249\016\123\000\000\000\208\018\000\000\000\000\000\000\084\020\
\043\000\180\000\189\000\249\016\097\018\000\000\000\000\139\020\
\068\013\136\005\136\005\033\010\033\010\115\004\115\004\026\000\
\115\004\115\004\112\020\000\000\000\000\000\000\000\000\159\255\
\159\255\159\255\159\255\211\020\122\013\165\020\191\020\136\005\
\136\005\001\003\001\003\026\000\026\000\026\000\000\000\249\016\
\151\008\190\000\192\000\000\000\207\000\194\000\044\000\000\000\
\207\000\055\000\162\000\195\000\000\000\197\000\000\000\199\000\
\205\000\000\000\193\000\209\000\000\000\000\000\038\255\084\020\
\212\000\000\000\226\000\000\000\000\000\218\000\213\254\249\016\
\249\016\083\255\219\000\234\000\000\000\000\000\000\000\190\255\
\000\000\000\000\219\000\000\000\038\255\084\020\151\008\193\010\
\000\000\000\000\249\016\249\016\000\000\249\016\249\016\000\000\
\229\000\000\000\059\000\000\000\249\016\000\000\249\016\000\000\
\243\016\233\000\157\000\157\000\000\000\013\009\159\255\159\255\
\159\255\159\255\159\255\159\255\159\255\159\255\159\255\159\255\
\000\000\251\000\151\008\130\000\064\001\039\011\191\000\000\001\
\104\000\151\008\000\000\130\000\151\008\000\000\000\000\240\254\
\253\000\000\000\254\000\100\001\249\016\101\001\015\001\028\255\
\024\001\025\001\000\000\152\255\000\000\102\001\249\016\159\255\
\114\001\159\255\249\016\073\001\000\000\190\017\092\019\073\000\
\083\255\083\255\034\255\126\001\044\001\245\255\000\000\047\001\
\055\001\046\001\000\000\000\000\000\000\000\000\043\001\048\001\
\000\000\000\000\084\020\134\018\249\016\249\016\249\016\118\001\
\000\000\075\001\182\011\202\011\059\011\239\001\157\000\157\000\
\075\001\075\001\075\001\249\016\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\249\016\104\000\000\000\000\000\000\000\
\000\000\159\255\249\016\000\000\022\000\249\016\132\001\243\254\
\223\017\123\255\249\016\137\255\228\254\000\000\038\255\028\255\
\249\016\038\255\243\018\231\020\000\000\251\020\022\019\000\000\
\083\255\126\001\000\000\234\000\000\000\050\001\083\255\140\255\
\000\000\249\016\000\000\000\000\000\000\245\255\000\000\065\001\
\000\000\000\000\000\000\000\000\000\000\085\000\030\017\058\017\
\249\016\063\001\118\001\134\001\000\000\000\000\000\000\084\020\
\000\000\015\021\057\019\000\000\000\000\098\000\067\001\249\016\
\151\008\038\255\000\000\249\016\151\008\171\018\000\000\000\000\
\000\000\084\020\131\001\000\000\159\255\159\255\068\001\140\001\
\003\000\000\000\127\001\102\000\125\019\117\001\249\016\000\000\
\000\000\000\000\224\019\000\000\000\000\095\001\118\001\159\255\
\128\001\000\000\000\000\028\020\162\001\149\255\084\020\138\001\
\116\001\000\000\247\012\067\016\122\001\145\001\083\255\191\001\
\000\000\000\000\000\000\135\001\158\019\000\000\249\016\249\016\
\118\001\000\000\027\021\159\255\249\016\249\016\038\255\249\016\
\250\254\249\016\203\001\000\000\000\000\000\000\000\000\000\000\
\000\000\249\016\139\001\084\020\084\020\000\000\047\021\084\020\
\056\020\000\000\000\018\000\000\000\000\084\020\249\016\137\001\
\203\001\206\001\000\000\191\019\245\255\159\255\249\016\038\255\
\254\019\000\000\000\000\142\001\203\001\000\000\000\000\059\021\
\084\020\201\001\038\255\038\255\203\001\000\000\000\000\205\001\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\227\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\015\034\015\073\015\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\001\000\000\000\000\000\000\000\000\000\000\125\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\158\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\105\015\000\000\000\000\137\015\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\178\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\210\015\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\013\000\000\243\015\000\000\000\000\
\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\009\216\001\055\002\146\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\000\
\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\136\255\000\000\000\000\000\000\000\000\
\000\000\000\000\141\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\149\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\010\
\037\010\139\006\230\006\251\007\086\008\023\005\118\005\237\002\
\209\005\044\006\223\010\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\107\009\016\009\181\008\065\007\
\160\007\097\004\188\004\076\003\167\003\002\004\000\000\000\000\
\000\000\143\001\000\000\000\000\019\016\000\000\000\000\000\000\
\051\016\000\000\060\018\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\167\255\196\013\
\221\000\000\000\237\013\000\000\000\000\000\000\133\011\000\000\
\000\000\000\000\022\014\206\012\000\000\000\000\000\000\071\000\
\000\000\000\000\081\014\000\000\167\255\132\014\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\241\007\255\007\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\015\000\000\000\000\000\000\176\014\
\073\015\000\000\000\000\034\015\000\000\000\000\000\000\230\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\201\011\
\020\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\156\000\000\000\128\000\000\000\000\000\215\001\
\000\000\192\009\000\000\218\255\224\000\155\000\093\009\114\010\
\213\010\008\012\070\012\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\073\015\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\
\000\000\000\000\000\000\241\254\000\000\000\000\239\008\000\000\
\000\000\249\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\013\000\000\000\000\000\000\133\011\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\176\255\000\000\000\000\000\000\000\000\220\014\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\178\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\149\001\000\000\000\000\000\000\000\000\058\011\218\001\
\071\000\000\000\000\000\000\000\000\000\082\012\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\157\001\000\000\
\005\000\000\000\000\000\000\000\000\000\093\255\153\001\000\000\
\000\000\000\000\000\000\000\000\000\000\133\011\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\160\001\000\000\000\000\000\000\000\000\000\000\170\255\000\000\
\000\000\000\000\230\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\144\012\164\255\251\254\000\000\000\000\232\001\
\000\000\000\000\000\000\000\000\000\000\177\001\000\000\000\000\
\184\255\000\000\000\000\000\000\000\000\000\000\000\000\151\255\
\000\000\000\000\000\000\000\000\183\001\000\000\000\000\000\000\
\008\002\005\002\142\255\109\255\199\001\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\008\000\007\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\251\255\
\000\000\000\000\016\000\004\000\000\000\116\002\095\002\006\002\
\000\000\086\255\000\000\004\002\000\000\221\255\000\000\135\002\
\000\000\000\000\000\000\211\002\075\255\000\000\007\255\000\000\
\099\013\140\002\000\000\181\254\142\002\000\000\000\000\234\001\
\000\000\000\000\208\002\000\000\000\000\147\001\200\254\000\000\
\131\254\000\000\053\001\004\001\000\000\002\001\010\001\000\000\
\174\254\000\000\000\000\000\000\000\000\070\001\082\001\000\000\
\082\254\225\001\147\254\000\000\000\000\000\000\154\001\156\001\
\000\000\000\000\000\000\000\000\000\000\071\254\229\001\000\000"

let yytablesize = 5771
let yytable = "\066\000\
\007\001\099\000\035\001\071\000\189\001\158\001\048\000\206\001\
\167\000\245\000\110\000\123\000\246\001\120\000\205\000\052\002\
\030\000\224\001\075\000\076\000\077\000\078\000\106\001\080\000\
\081\000\082\000\083\000\086\000\172\001\125\000\129\000\214\000\
\001\000\068\000\190\001\176\001\253\001\145\000\088\001\173\001\
\222\001\145\000\107\001\122\001\089\001\206\000\090\001\108\001\
\145\000\162\001\248\000\070\000\145\000\128\000\207\000\131\000\
\132\000\133\000\134\000\136\000\231\001\091\001\117\000\126\000\
\249\000\092\001\072\000\093\001\225\001\163\001\006\001\164\001\
\094\001\145\000\165\001\240\001\168\000\095\001\053\002\245\000\
\163\000\217\001\124\000\023\001\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\169\000\150\000\111\000\124\000\112\001\151\000\152\000\153\000\
\154\000\155\000\253\001\156\000\157\000\158\000\159\000\160\000\
\024\001\204\000\155\000\096\001\208\000\126\000\130\000\233\001\
\215\000\191\001\227\001\120\000\213\000\096\001\194\000\210\000\
\198\000\199\000\200\000\071\002\216\000\217\000\218\000\219\000\
\220\000\221\000\222\000\223\000\224\000\225\000\226\000\227\000\
\074\000\237\000\238\000\239\000\240\000\241\000\242\000\243\000\
\244\000\245\000\246\000\079\000\120\000\096\000\120\000\228\000\
\186\000\040\002\229\000\153\001\230\000\231\000\025\001\031\002\
\032\002\120\000\026\001\016\001\120\000\005\001\109\000\005\001\
\010\001\155\000\244\000\250\000\244\000\038\001\083\000\014\001\
\235\001\004\001\112\000\004\001\009\001\113\000\228\001\120\000\
\241\000\120\000\020\001\021\001\120\000\120\000\124\000\120\000\
\160\000\165\000\162\001\114\000\229\001\106\001\057\001\127\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\176\001\
\049\001\002\000\072\000\177\001\086\000\166\000\163\001\057\000\
\072\000\107\001\120\000\041\000\187\000\042\000\067\002\124\000\
\006\002\115\000\232\000\233\000\058\000\059\000\043\000\234\000\
\124\000\044\000\045\000\115\001\188\000\195\001\235\000\060\000\
\244\000\046\000\067\002\120\000\074\001\196\001\120\000\041\000\
\124\000\042\000\118\000\124\000\238\000\116\001\120\000\073\001\
\117\001\244\001\043\000\124\000\157\000\044\000\045\000\118\001\
\122\000\040\001\110\001\111\001\061\000\046\000\220\001\041\001\
\161\000\164\000\232\000\062\000\063\000\030\000\221\001\232\000\
\064\000\176\000\232\000\030\000\030\000\050\002\030\000\065\000\
\150\001\030\000\123\001\170\000\030\000\047\000\030\000\131\001\
\160\001\132\001\232\000\030\000\030\000\030\000\030\000\030\000\
\030\000\171\000\125\001\030\000\030\000\127\001\128\001\030\000\
\030\000\172\000\030\000\174\000\147\000\044\001\074\002\006\001\
\147\000\047\000\116\001\045\001\189\000\117\001\149\001\006\001\
\006\001\081\002\082\002\006\001\118\001\159\001\146\000\169\001\
\161\001\006\001\006\001\150\000\006\001\147\000\173\000\006\001\
\175\000\179\001\006\001\030\000\006\001\183\001\006\001\006\001\
\100\000\006\001\006\001\006\001\006\001\006\001\006\001\006\001\
\101\000\006\001\006\001\006\001\006\001\006\001\006\001\006\001\
\006\001\176\000\201\000\188\000\220\000\053\001\079\001\208\000\
\207\001\208\001\090\000\054\001\080\001\177\000\041\000\102\000\
\042\000\079\001\202\000\091\000\006\001\040\001\178\000\081\001\
\103\000\043\000\179\000\130\001\044\000\045\000\216\001\180\000\
\104\000\006\001\181\000\113\001\046\000\219\001\096\000\006\001\
\208\000\187\001\092\000\215\001\182\000\230\001\096\000\053\001\
\184\000\211\000\096\000\234\001\150\000\248\001\093\000\094\000\
\096\000\096\000\095\000\096\000\053\001\247\000\096\000\252\000\
\113\001\096\000\002\002\096\000\245\001\096\000\018\002\254\000\
\096\000\096\000\096\000\096\000\096\000\096\000\096\000\012\001\
\096\000\096\000\017\001\251\001\096\000\096\000\096\000\096\000\
\047\000\022\001\140\000\050\001\039\001\042\001\101\000\202\000\
\140\000\063\001\004\002\231\000\101\000\086\000\007\002\056\000\
\231\000\231\000\231\000\231\000\005\002\056\000\086\000\141\000\
\008\002\086\000\070\001\071\001\072\001\141\000\142\000\086\000\
\086\000\021\002\086\000\231\000\142\000\086\000\043\001\119\000\
\086\000\120\000\086\000\046\001\121\000\086\000\047\001\086\000\
\086\000\086\000\086\000\086\000\086\000\048\001\055\001\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\056\001\
\075\001\044\002\045\002\078\001\077\001\082\001\076\001\048\002\
\049\002\086\001\051\002\083\001\054\002\084\001\086\000\085\001\
\233\000\176\000\176\000\104\001\060\002\233\000\233\000\087\001\
\233\000\103\001\176\000\176\000\105\001\113\001\176\000\114\001\
\176\000\065\002\176\000\176\000\176\000\176\000\203\000\176\000\
\233\000\073\002\176\000\129\001\136\001\176\000\148\001\176\000\
\151\001\176\000\176\000\156\001\176\000\176\000\176\000\176\000\
\176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
\176\000\176\000\176\000\176\000\166\001\167\001\176\000\176\000\
\176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
\176\000\176\000\176\000\176\000\168\001\170\001\171\001\176\000\
\176\000\176\000\176\000\176\000\174\001\176\000\176\000\176\000\
\176\000\176\000\175\001\176\000\176\000\181\001\176\000\178\001\
\176\000\184\001\176\000\176\000\220\000\220\000\192\001\194\001\
\198\001\200\001\202\001\203\001\209\001\220\000\220\000\063\001\
\204\001\220\000\223\001\220\000\243\001\220\000\220\000\220\000\
\220\000\201\000\220\000\252\001\247\001\220\000\254\001\010\002\
\220\000\013\002\220\000\003\002\220\000\220\000\015\002\220\000\
\220\000\220\000\220\000\220\000\220\000\220\000\220\000\220\000\
\220\000\220\000\220\000\220\000\220\000\220\000\220\000\017\002\
\024\002\220\000\220\000\220\000\220\000\220\000\220\000\220\000\
\220\000\220\000\220\000\220\000\220\000\220\000\220\000\020\002\
\030\002\028\002\220\000\220\000\220\000\220\000\220\000\035\002\
\220\000\220\000\220\000\220\000\220\000\034\002\220\000\220\000\
\038\002\220\000\106\001\220\000\041\002\220\000\220\000\202\000\
\202\000\055\002\042\002\031\002\061\002\066\002\068\002\076\002\
\202\000\202\000\083\002\025\000\202\000\066\000\202\000\240\000\
\202\000\202\000\202\000\202\000\186\000\202\000\130\000\252\000\
\202\000\240\000\134\000\202\000\241\000\202\000\159\000\202\000\
\202\000\138\000\202\000\202\000\202\000\202\000\202\000\202\000\
\202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\
\202\000\202\000\135\000\159\000\202\000\202\000\202\000\202\000\
\202\000\202\000\202\000\202\000\202\000\202\000\202\000\202\000\
\202\000\139\000\155\000\160\000\089\000\202\000\202\000\202\000\
\202\000\202\000\013\001\202\000\202\000\202\000\202\000\202\000\
\051\001\202\000\202\000\063\001\202\000\124\001\202\000\126\001\
\202\000\202\000\008\001\183\000\002\001\001\001\203\000\203\000\
\155\001\185\000\068\001\069\001\070\001\071\001\072\001\203\000\
\203\000\232\001\039\002\203\000\025\002\203\000\077\002\203\000\
\203\000\203\000\203\000\183\000\203\000\080\002\078\002\203\000\
\026\002\188\001\203\000\241\001\203\000\242\001\203\000\203\000\
\193\001\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\203\000\000\000\000\000\203\000\203\000\203\000\203\000\203\000\
\203\000\203\000\203\000\203\000\203\000\203\000\203\000\203\000\
\000\000\000\000\000\000\000\000\203\000\203\000\203\000\203\000\
\203\000\000\000\203\000\203\000\203\000\203\000\203\000\000\000\
\203\000\203\000\000\000\203\000\000\000\203\000\000\000\203\000\
\203\000\201\000\201\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\201\000\201\000\000\000\000\000\201\000\000\000\
\201\000\000\000\201\000\201\000\201\000\201\000\184\000\201\000\
\000\000\000\000\201\000\000\000\000\000\201\000\000\000\201\000\
\000\000\201\000\201\000\000\000\201\000\201\000\201\000\201\000\
\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
\201\000\201\000\201\000\201\000\000\000\000\000\201\000\201\000\
\201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
\201\000\201\000\201\000\000\000\000\000\000\000\000\000\201\000\
\201\000\201\000\201\000\201\000\000\000\201\000\201\000\201\000\
\201\000\201\000\000\000\201\000\201\000\000\000\201\000\000\000\
\201\000\000\000\201\000\201\000\186\000\186\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\186\000\186\000\000\000\
\000\000\186\000\000\000\186\000\000\000\186\000\186\000\186\000\
\186\000\185\000\186\000\000\000\000\000\186\000\000\000\000\000\
\186\000\000\000\186\000\000\000\186\000\186\000\000\000\186\000\
\186\000\186\000\186\000\186\000\186\000\186\000\186\000\186\000\
\186\000\186\000\186\000\186\000\186\000\186\000\186\000\000\000\
\000\000\186\000\186\000\186\000\186\000\186\000\186\000\186\000\
\186\000\000\000\186\000\186\000\186\000\186\000\000\000\000\000\
\000\000\000\000\186\000\186\000\186\000\186\000\186\000\000\000\
\186\000\186\000\186\000\186\000\186\000\146\000\186\000\186\000\
\000\000\186\000\150\000\186\000\000\000\186\000\186\000\000\000\
\000\000\000\000\000\000\183\000\183\000\000\000\158\000\159\000\
\160\000\000\000\000\000\000\000\183\000\183\000\000\000\000\000\
\183\000\000\000\183\000\000\000\183\000\183\000\183\000\183\000\
\181\000\183\000\000\000\000\000\183\000\000\000\000\000\183\000\
\000\000\183\000\000\000\183\000\183\000\000\000\183\000\183\000\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\183\000\183\000\183\000\183\000\183\000\183\000\000\000\000\000\
\183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
\000\000\183\000\183\000\183\000\183\000\000\000\000\000\000\000\
\000\000\183\000\183\000\183\000\183\000\183\000\000\000\183\000\
\183\000\183\000\183\000\183\000\000\000\183\000\183\000\000\000\
\183\000\000\000\183\000\000\000\183\000\183\000\184\000\184\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\000\
\184\000\000\000\000\000\184\000\000\000\184\000\000\000\184\000\
\184\000\184\000\184\000\182\000\184\000\000\000\000\000\184\000\
\000\000\000\000\184\000\000\000\184\000\000\000\184\000\184\000\
\000\000\184\000\184\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\184\000\184\000\184\000\184\000\184\000\
\184\000\000\000\000\000\184\000\184\000\184\000\184\000\184\000\
\184\000\184\000\184\000\000\000\184\000\184\000\184\000\184\000\
\000\000\000\000\000\000\000\000\184\000\184\000\184\000\184\000\
\184\000\000\000\184\000\184\000\184\000\184\000\184\000\000\000\
\184\000\184\000\000\000\184\000\000\000\184\000\000\000\184\000\
\184\000\185\000\185\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\185\000\185\000\000\000\000\000\185\000\000\000\
\185\000\000\000\185\000\185\000\185\000\185\000\187\000\185\000\
\000\000\000\000\185\000\000\000\000\000\185\000\000\000\185\000\
\000\000\185\000\185\000\000\000\185\000\185\000\185\000\185\000\
\185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
\185\000\185\000\185\000\185\000\000\000\000\000\185\000\185\000\
\185\000\185\000\185\000\185\000\185\000\185\000\000\000\185\000\
\185\000\185\000\185\000\000\000\000\000\000\000\000\000\185\000\
\185\000\185\000\185\000\185\000\000\000\185\000\185\000\185\000\
\185\000\185\000\000\000\185\000\185\000\000\000\185\000\000\000\
\185\000\000\000\185\000\185\000\000\000\000\000\000\000\000\000\
\181\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\181\000\181\000\000\000\000\000\181\000\000\000\181\000\
\000\000\181\000\181\000\181\000\181\000\188\000\181\000\000\000\
\000\000\181\000\000\000\000\000\181\000\000\000\181\000\000\000\
\181\000\181\000\000\000\181\000\181\000\181\000\181\000\181\000\
\181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
\181\000\181\000\181\000\000\000\000\000\181\000\181\000\181\000\
\181\000\181\000\181\000\181\000\181\000\000\000\181\000\181\000\
\181\000\181\000\000\000\000\000\000\000\000\000\181\000\181\000\
\181\000\181\000\181\000\000\000\181\000\181\000\000\000\146\000\
\000\000\000\000\181\000\181\000\150\000\181\000\000\000\181\000\
\000\000\181\000\181\000\182\000\182\000\000\000\156\000\157\000\
\158\000\159\000\160\000\000\000\182\000\182\000\000\000\000\000\
\182\000\000\000\182\000\000\000\182\000\182\000\182\000\182\000\
\190\000\182\000\000\000\000\000\182\000\000\000\000\000\182\000\
\000\000\182\000\000\000\182\000\182\000\000\000\182\000\182\000\
\182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
\182\000\182\000\182\000\182\000\182\000\182\000\000\000\000\000\
\182\000\182\000\182\000\182\000\182\000\182\000\182\000\182\000\
\000\000\182\000\182\000\182\000\182\000\000\000\000\000\000\000\
\000\000\182\000\182\000\182\000\182\000\182\000\000\000\182\000\
\182\000\000\000\000\000\000\000\000\000\182\000\182\000\000\000\
\182\000\000\000\182\000\000\000\182\000\182\000\187\000\187\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\187\000\
\187\000\000\000\000\000\187\000\000\000\187\000\000\000\187\000\
\187\000\187\000\187\000\189\000\187\000\000\000\000\000\187\000\
\000\000\000\000\187\000\000\000\187\000\000\000\187\000\187\000\
\000\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
\187\000\187\000\187\000\187\000\187\000\187\000\187\000\187\000\
\187\000\000\000\000\000\187\000\187\000\187\000\187\000\187\000\
\187\000\187\000\187\000\000\000\187\000\187\000\187\000\187\000\
\000\000\000\000\000\000\000\000\187\000\187\000\187\000\187\000\
\187\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\187\000\187\000\000\000\187\000\000\000\187\000\000\000\187\000\
\187\000\000\000\000\000\000\000\000\000\188\000\188\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\188\000\188\000\
\000\000\000\000\188\000\000\000\188\000\000\000\188\000\188\000\
\188\000\188\000\193\000\188\000\000\000\000\000\188\000\000\000\
\000\000\188\000\000\000\188\000\000\000\188\000\188\000\000\000\
\188\000\188\000\188\000\188\000\188\000\188\000\188\000\188\000\
\188\000\188\000\188\000\188\000\188\000\188\000\188\000\188\000\
\000\000\000\000\188\000\188\000\188\000\188\000\188\000\188\000\
\188\000\188\000\000\000\188\000\188\000\188\000\188\000\000\000\
\000\000\000\000\000\000\188\000\188\000\188\000\188\000\188\000\
\000\000\000\000\144\000\145\000\146\000\147\000\148\000\188\000\
\188\000\150\000\188\000\000\000\188\000\000\000\188\000\188\000\
\190\000\190\000\000\000\156\000\157\000\158\000\159\000\160\000\
\000\000\190\000\190\000\000\000\000\000\190\000\000\000\190\000\
\000\000\190\000\190\000\190\000\190\000\194\000\190\000\000\000\
\000\000\190\000\000\000\000\000\190\000\000\000\190\000\000\000\
\190\000\190\000\000\000\190\000\190\000\190\000\190\000\190\000\
\190\000\190\000\190\000\190\000\190\000\190\000\190\000\190\000\
\190\000\190\000\190\000\000\000\000\000\190\000\190\000\190\000\
\190\000\190\000\190\000\190\000\190\000\000\000\190\000\190\000\
\190\000\190\000\000\000\000\000\000\000\000\000\190\000\190\000\
\190\000\190\000\190\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\190\000\190\000\000\000\190\000\000\000\190\000\
\000\000\190\000\190\000\189\000\189\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\189\000\189\000\000\000\000\000\
\189\000\000\000\189\000\000\000\189\000\189\000\189\000\189\000\
\192\000\189\000\000\000\000\000\189\000\000\000\000\000\189\000\
\000\000\189\000\000\000\189\000\189\000\000\000\189\000\189\000\
\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
\189\000\189\000\189\000\189\000\189\000\189\000\000\000\000\000\
\189\000\189\000\189\000\189\000\189\000\189\000\189\000\189\000\
\000\000\189\000\189\000\189\000\189\000\000\000\000\000\000\000\
\000\000\189\000\189\000\189\000\189\000\189\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\189\000\189\000\000\000\
\189\000\000\000\189\000\000\000\189\000\189\000\000\000\000\000\
\000\000\000\000\193\000\193\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\193\000\193\000\000\000\000\000\193\000\
\000\000\193\000\000\000\193\000\193\000\193\000\193\000\191\000\
\193\000\000\000\000\000\193\000\000\000\000\000\193\000\000\000\
\193\000\000\000\193\000\193\000\000\000\193\000\193\000\193\000\
\193\000\193\000\193\000\193\000\193\000\193\000\193\000\193\000\
\193\000\193\000\193\000\193\000\193\000\000\000\000\000\193\000\
\193\000\193\000\193\000\193\000\193\000\000\000\000\000\000\000\
\000\000\000\000\193\000\193\000\000\000\000\000\000\000\000\000\
\193\000\193\000\193\000\193\000\193\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\193\000\193\000\000\000\193\000\
\000\000\193\000\000\000\193\000\193\000\194\000\194\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\194\000\194\000\
\000\000\000\000\194\000\000\000\194\000\000\000\194\000\194\000\
\194\000\194\000\195\000\194\000\000\000\000\000\194\000\000\000\
\000\000\194\000\000\000\194\000\000\000\194\000\194\000\000\000\
\194\000\194\000\194\000\194\000\194\000\194\000\194\000\194\000\
\194\000\194\000\194\000\194\000\194\000\194\000\194\000\194\000\
\000\000\000\000\194\000\194\000\194\000\194\000\194\000\194\000\
\000\000\000\000\000\000\000\000\000\000\194\000\194\000\000\000\
\000\000\000\000\000\000\194\000\194\000\194\000\194\000\194\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\000\
\194\000\000\000\194\000\000\000\194\000\000\000\194\000\194\000\
\192\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\192\000\192\000\000\000\000\000\192\000\000\000\192\000\
\000\000\192\000\192\000\192\000\192\000\196\000\192\000\000\000\
\000\000\192\000\000\000\000\000\192\000\000\000\192\000\000\000\
\192\000\192\000\000\000\192\000\192\000\192\000\192\000\192\000\
\192\000\192\000\192\000\192\000\192\000\192\000\192\000\192\000\
\192\000\192\000\192\000\000\000\000\000\192\000\192\000\192\000\
\192\000\192\000\192\000\000\000\000\000\000\000\000\000\000\000\
\192\000\192\000\000\000\000\000\000\000\000\000\192\000\192\000\
\192\000\192\000\192\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\192\000\192\000\000\000\192\000\000\000\192\000\
\000\000\192\000\192\000\000\000\000\000\000\000\000\000\191\000\
\191\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\191\000\191\000\000\000\000\000\191\000\000\000\191\000\000\000\
\191\000\191\000\191\000\191\000\197\000\191\000\000\000\000\000\
\191\000\000\000\000\000\191\000\000\000\191\000\000\000\191\000\
\191\000\000\000\191\000\191\000\191\000\191\000\191\000\191\000\
\191\000\191\000\191\000\191\000\191\000\191\000\191\000\191\000\
\191\000\191\000\000\000\000\000\191\000\191\000\191\000\191\000\
\191\000\191\000\000\000\000\000\000\000\000\000\000\000\191\000\
\191\000\000\000\000\000\000\000\000\000\191\000\191\000\191\000\
\191\000\191\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\191\000\191\000\000\000\191\000\000\000\191\000\000\000\
\191\000\191\000\195\000\195\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\195\000\195\000\000\000\000\000\195\000\
\000\000\195\000\000\000\195\000\195\000\195\000\195\000\198\000\
\195\000\000\000\000\000\195\000\000\000\000\000\195\000\000\000\
\195\000\000\000\195\000\195\000\000\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\195\000\195\000\195\000\
\195\000\195\000\195\000\195\000\195\000\000\000\000\000\195\000\
\195\000\223\000\000\000\195\000\195\000\000\000\223\000\223\000\
\223\000\223\000\195\000\195\000\223\000\223\000\000\000\222\000\
\195\000\195\000\195\000\000\000\222\000\222\000\222\000\222\000\
\000\000\223\000\222\000\222\000\195\000\195\000\000\000\195\000\
\000\000\195\000\000\000\195\000\195\000\196\000\196\000\222\000\
\000\000\000\000\000\000\000\000\000\000\000\000\196\000\196\000\
\000\000\000\000\196\000\000\000\196\000\000\000\196\000\196\000\
\196\000\196\000\199\000\196\000\000\000\000\000\196\000\000\000\
\000\000\196\000\000\000\196\000\000\000\196\000\196\000\000\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\196\000\196\000\196\000\196\000\196\000\196\000\196\000\196\000\
\000\000\000\000\196\000\196\000\000\000\000\000\196\000\196\000\
\000\000\000\000\000\000\000\000\000\000\196\000\196\000\039\000\
\000\000\000\000\000\000\196\000\196\000\196\000\000\000\000\000\
\000\000\000\000\041\000\000\000\042\000\000\000\000\000\196\000\
\196\000\000\000\196\000\000\000\196\000\043\000\196\000\196\000\
\044\000\045\000\000\000\000\000\197\000\197\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\197\000\197\000\000\000\
\000\000\197\000\000\000\197\000\000\000\197\000\197\000\197\000\
\197\000\200\000\197\000\000\000\000\000\197\000\000\000\000\000\
\197\000\000\000\197\000\000\000\197\000\197\000\000\000\197\000\
\197\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\
\197\000\197\000\197\000\197\000\197\000\197\000\197\000\000\000\
\000\000\197\000\197\000\000\000\047\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\197\000\197\000\000\000\000\000\
\000\000\000\000\197\000\197\000\197\000\121\000\000\000\121\000\
\000\000\121\000\121\000\121\000\121\000\000\000\197\000\197\000\
\000\000\197\000\000\000\197\000\000\000\197\000\197\000\198\000\
\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\198\000\198\000\000\000\000\000\198\000\000\000\198\000\000\000\
\198\000\198\000\198\000\198\000\204\000\198\000\000\000\000\000\
\198\000\000\000\000\000\198\000\000\000\198\000\000\000\198\000\
\198\000\000\000\198\000\198\000\198\000\198\000\198\000\198\000\
\198\000\198\000\198\000\198\000\198\000\198\000\198\000\198\000\
\198\000\198\000\000\000\121\000\198\000\198\000\000\000\000\000\
\124\000\063\001\000\000\000\000\000\000\000\000\000\000\198\000\
\198\000\000\000\065\001\066\001\067\001\198\000\198\000\000\000\
\068\001\069\001\070\001\071\001\072\001\000\000\000\000\000\000\
\000\000\198\000\198\000\000\000\198\000\137\001\198\000\000\000\
\198\000\198\000\199\000\199\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\199\000\199\000\000\000\000\000\199\000\
\000\000\199\000\000\000\199\000\199\000\199\000\199\000\205\000\
\199\000\000\000\000\000\199\000\000\000\000\000\199\000\000\000\
\199\000\000\000\199\000\199\000\000\000\199\000\199\000\199\000\
\199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
\199\000\199\000\199\000\199\000\199\000\225\000\000\000\199\000\
\199\000\000\000\225\000\225\000\225\000\225\000\000\000\000\000\
\225\000\225\000\199\000\199\000\039\000\000\000\000\000\000\000\
\199\000\000\000\040\000\000\000\000\000\225\000\000\000\041\000\
\000\000\042\000\000\000\000\000\199\000\199\000\000\000\199\000\
\000\000\199\000\043\000\199\000\199\000\044\000\045\000\000\000\
\000\000\200\000\200\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\200\000\200\000\000\000\000\000\200\000\000\000\
\200\000\000\000\200\000\200\000\200\000\200\000\175\000\200\000\
\000\000\000\000\200\000\000\000\000\000\200\000\000\000\200\000\
\000\000\200\000\200\000\000\000\200\000\200\000\200\000\200\000\
\200\000\200\000\200\000\200\000\200\000\200\000\200\000\200\000\
\200\000\200\000\200\000\200\000\000\000\000\000\200\000\200\000\
\230\000\047\000\000\000\000\000\000\000\230\000\230\000\230\000\
\230\000\200\000\200\000\230\000\230\000\230\000\230\000\230\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\230\000\000\000\000\000\200\000\200\000\000\000\200\000\000\000\
\200\000\000\000\200\000\200\000\204\000\204\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\204\000\204\000\000\000\
\000\000\204\000\000\000\204\000\000\000\204\000\204\000\204\000\
\204\000\023\001\204\000\000\000\000\000\204\000\000\000\000\000\
\204\000\000\000\204\000\000\000\204\000\204\000\000\000\204\000\
\204\000\204\000\204\000\204\000\204\000\204\000\204\000\204\000\
\204\000\204\000\204\000\204\000\204\000\204\000\204\000\140\000\
\141\000\204\000\204\000\144\000\145\000\146\000\147\000\148\000\
\000\000\000\000\150\000\000\000\204\000\204\000\000\000\000\000\
\000\000\154\000\155\000\000\000\156\000\157\000\158\000\159\000\
\160\000\000\000\000\000\000\000\000\000\000\000\204\000\204\000\
\000\000\204\000\000\000\204\000\000\000\204\000\204\000\205\000\
\205\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\
\205\000\205\000\000\000\000\000\205\000\000\000\205\000\000\000\
\205\000\205\000\205\000\205\000\000\000\205\000\000\000\000\000\
\205\000\000\000\000\000\205\000\000\000\205\000\000\000\205\000\
\205\000\000\000\205\000\205\000\205\000\205\000\205\000\205\000\
\205\000\205\000\205\000\205\000\205\000\205\000\205\000\205\000\
\205\000\205\000\226\000\000\000\205\000\000\000\000\000\226\000\
\226\000\226\000\226\000\000\000\000\000\226\000\226\000\205\000\
\205\000\188\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\001\000\000\226\000\000\000\041\000\000\000\042\000\000\000\
\000\000\205\000\205\000\000\000\205\000\000\000\205\000\043\000\
\205\000\205\000\044\000\045\000\000\000\000\000\175\000\175\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\175\000\
\175\000\000\000\000\000\175\000\000\000\175\000\000\000\175\000\
\175\000\175\000\175\000\000\000\175\000\000\000\000\000\175\000\
\000\000\000\000\175\000\000\000\175\000\000\000\175\000\175\000\
\000\000\175\000\175\000\175\000\175\000\175\000\175\000\175\000\
\175\000\175\000\175\000\175\000\175\000\175\000\175\000\175\000\
\175\000\000\000\000\000\015\001\000\000\227\000\047\000\000\000\
\000\000\000\000\227\000\227\000\227\000\227\000\175\000\175\000\
\227\000\227\000\227\000\227\000\227\000\000\000\000\000\152\001\
\000\000\000\000\000\000\000\000\000\000\227\000\000\000\000\000\
\175\000\175\000\041\000\175\000\042\000\175\000\000\000\175\000\
\175\000\000\000\023\001\000\000\000\000\043\000\000\000\000\000\
\044\000\045\000\023\001\023\001\000\000\000\000\023\001\000\000\
\046\000\000\000\000\000\000\000\023\001\023\001\000\000\023\001\
\000\000\014\001\023\001\000\000\000\000\023\001\000\000\023\001\
\000\000\023\001\023\001\000\000\023\001\023\001\023\001\023\001\
\023\001\023\001\023\001\000\000\023\001\023\001\023\001\023\001\
\023\001\023\001\023\001\023\001\000\000\000\000\000\000\023\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\001\
\000\000\000\000\000\000\023\001\047\000\000\000\000\000\023\001\
\000\000\023\001\067\001\000\000\023\001\143\000\068\001\069\001\
\070\001\071\001\072\001\023\001\023\001\143\000\143\000\016\001\
\000\000\143\000\023\001\000\000\000\000\000\000\000\000\143\000\
\143\000\000\000\143\000\000\000\000\000\143\000\000\000\000\000\
\143\000\000\000\143\000\000\000\143\000\143\000\000\000\143\000\
\143\000\143\000\143\000\143\000\143\000\143\000\000\000\143\000\
\143\000\143\000\143\000\143\000\143\000\143\000\143\000\000\000\
\000\000\000\000\143\000\036\001\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\001\143\000\057\000\143\000\246\000\000\000\143\000\
\000\000\013\001\013\001\000\000\000\000\013\001\143\000\143\000\
\058\000\059\000\000\000\013\001\013\001\143\000\013\001\000\000\
\000\000\013\001\000\000\060\000\013\001\000\000\013\001\000\000\
\013\001\013\001\000\000\013\001\013\001\013\001\013\001\013\001\
\013\001\013\001\063\001\013\001\013\001\013\001\013\001\013\001\
\013\001\013\001\013\001\065\001\066\001\067\001\214\001\000\000\
\061\000\068\001\069\001\070\001\071\001\072\001\063\001\062\000\
\063\000\247\000\000\000\000\000\064\000\000\000\013\001\037\001\
\066\001\067\001\000\000\065\000\015\001\068\001\069\001\070\001\
\071\001\072\001\000\000\013\001\015\001\015\001\000\000\000\000\
\015\001\013\001\000\000\000\000\000\000\000\000\015\001\015\001\
\000\000\015\001\000\000\000\000\015\001\000\000\000\000\015\001\
\000\000\015\001\000\000\015\001\015\001\000\000\015\001\015\001\
\015\001\015\001\015\001\015\001\015\001\000\000\015\001\015\001\
\015\001\015\001\015\001\015\001\015\001\015\001\000\000\058\000\
\228\000\000\000\000\000\000\000\000\000\228\000\228\000\228\000\
\228\000\000\000\014\001\228\000\228\000\228\000\228\000\228\000\
\000\000\015\001\014\001\014\001\000\000\000\000\014\001\000\000\
\228\000\000\000\000\000\000\000\014\001\014\001\015\001\014\001\
\000\000\000\000\014\001\000\000\015\001\014\001\000\000\014\001\
\000\000\014\001\014\001\000\000\014\001\014\001\014\001\014\001\
\014\001\014\001\014\001\000\000\014\001\014\001\014\001\014\001\
\014\001\014\001\014\001\014\001\000\000\000\000\229\000\000\000\
\000\000\000\000\000\000\229\000\229\000\229\000\229\000\000\000\
\016\001\229\000\229\000\229\000\229\000\229\000\000\000\014\001\
\016\001\016\001\000\000\000\000\016\001\000\000\229\000\000\000\
\000\000\000\000\016\001\016\001\014\001\016\001\000\000\000\000\
\016\001\000\000\014\001\016\001\000\000\016\001\000\000\016\001\
\016\001\000\000\016\001\016\001\016\001\016\001\016\001\016\001\
\016\001\000\000\016\001\016\001\016\001\016\001\016\001\016\001\
\016\001\016\001\000\000\082\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\246\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\001\246\000\246\000\
\000\000\000\000\246\000\000\000\000\000\000\000\000\000\000\000\
\246\000\246\000\016\001\246\000\000\000\000\000\246\000\000\000\
\016\001\246\000\000\000\246\000\084\000\246\000\246\000\000\000\
\246\000\246\000\246\000\246\000\246\000\246\000\246\000\000\000\
\246\000\246\000\246\000\246\000\246\000\246\000\246\000\246\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\247\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\247\000\247\000\000\000\080\000\247\000\000\000\
\000\000\000\000\000\000\000\000\247\000\247\000\000\000\247\000\
\246\000\000\000\247\000\000\000\000\000\247\000\246\000\247\000\
\000\000\247\000\247\000\000\000\247\000\247\000\247\000\247\000\
\247\000\247\000\247\000\063\001\247\000\247\000\247\000\247\000\
\247\000\247\000\247\000\247\000\065\001\066\001\067\001\036\002\
\000\000\000\000\068\001\069\001\070\001\071\001\072\001\000\000\
\058\000\000\000\059\001\060\001\061\001\062\001\000\000\000\000\
\115\000\058\000\000\000\000\000\058\000\000\000\000\000\000\000\
\000\000\000\000\058\000\058\000\247\000\058\000\000\000\000\000\
\058\000\000\000\247\000\058\000\000\000\058\000\000\000\000\000\
\058\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\111\000\000\000\150\000\000\000\000\000\
\058\000\151\000\152\000\153\000\154\000\155\000\000\000\156\000\
\157\000\158\000\159\000\160\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\000\000\000\000\058\000\000\000\
\058\000\138\001\139\001\140\001\141\001\142\001\143\001\144\001\
\145\001\146\001\147\001\000\000\000\000\000\000\000\000\090\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\000\000\000\000\150\000\000\000\000\000\000\000\000\000\
\152\000\153\000\154\000\155\000\082\000\156\000\157\000\158\000\
\159\000\160\000\180\001\000\000\182\001\082\000\000\000\000\000\
\082\000\000\000\000\000\000\000\000\000\000\000\082\000\082\000\
\000\000\082\000\000\000\091\000\082\000\000\000\000\000\082\000\
\000\000\082\000\000\000\000\000\082\000\000\000\082\000\082\000\
\082\000\082\000\082\000\082\000\000\000\084\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\084\000\000\000\
\000\000\084\000\000\000\088\000\000\000\000\000\000\000\084\000\
\084\000\000\000\084\000\000\000\218\001\084\000\000\000\000\000\
\084\000\000\000\084\000\000\000\000\000\084\000\000\000\084\000\
\084\000\084\000\084\000\084\000\084\000\000\000\080\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\080\000\
\000\000\073\000\080\000\000\000\000\000\000\000\000\000\000\000\
\080\000\080\000\000\000\080\000\000\000\000\000\080\000\000\000\
\000\000\080\000\000\000\080\000\000\000\000\000\080\000\000\000\
\080\000\080\000\080\000\080\000\080\000\080\000\000\000\000\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\107\000\000\000\000\000\000\000\000\000\000\000\000\000\011\002\
\012\002\115\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\115\000\000\000\000\000\000\000\115\000\000\000\000\000\
\000\000\000\000\027\002\115\000\115\000\000\000\115\000\000\000\
\027\000\115\000\000\000\000\000\115\000\000\000\115\000\000\000\
\115\000\000\000\000\000\115\000\115\000\115\000\115\000\115\000\
\115\000\115\000\000\000\115\000\115\000\000\000\047\002\115\000\
\115\000\115\000\115\000\000\000\111\000\000\000\000\000\000\000\
\041\000\000\000\000\000\000\000\111\000\000\000\000\000\000\000\
\111\000\000\000\000\000\000\000\000\000\000\000\111\000\111\000\
\000\000\111\000\000\000\000\000\111\000\000\000\000\000\111\000\
\072\002\111\000\000\000\111\000\000\000\000\000\111\000\111\000\
\111\000\111\000\111\000\111\000\111\000\000\000\111\000\111\000\
\090\000\074\000\111\000\111\000\111\000\111\000\000\000\000\000\
\090\000\000\000\000\000\000\000\090\000\000\000\000\000\000\000\
\000\000\000\000\090\000\090\000\000\000\090\000\000\000\000\000\
\090\000\000\000\000\000\090\000\000\000\090\000\000\000\090\000\
\000\000\108\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\000\000\090\000\090\000\091\000\000\000\090\000\090\000\
\090\000\090\000\000\000\000\000\091\000\000\000\000\000\000\000\
\091\000\000\000\000\000\000\000\000\000\000\000\091\000\091\000\
\000\000\091\000\036\000\000\000\091\000\000\000\000\000\091\000\
\000\000\091\000\000\000\091\000\000\000\000\000\091\000\091\000\
\091\000\091\000\091\000\091\000\091\000\000\000\091\000\091\000\
\003\000\000\000\091\000\091\000\091\000\091\000\004\000\005\000\
\000\000\006\000\089\000\000\000\007\000\000\000\000\000\008\000\
\000\000\009\000\000\000\000\000\000\000\000\000\010\000\011\000\
\012\000\013\000\014\000\015\000\000\000\000\000\016\000\017\000\
\000\000\000\000\018\000\019\000\000\000\020\000\073\000\000\000\
\000\000\000\000\093\000\000\000\073\000\073\000\000\000\073\000\
\000\000\000\000\073\000\000\000\000\000\073\000\000\000\073\000\
\000\000\000\000\000\000\000\000\073\000\073\000\073\000\073\000\
\073\000\073\000\000\000\000\000\073\000\073\000\000\000\000\000\
\073\000\073\000\000\000\073\000\000\000\107\000\000\000\000\000\
\000\000\000\000\000\000\107\000\107\000\000\000\107\000\000\000\
\000\000\107\000\000\000\000\000\107\000\000\000\107\000\000\000\
\000\000\000\000\000\000\107\000\107\000\107\000\107\000\107\000\
\107\000\000\000\000\000\107\000\107\000\027\000\000\000\107\000\
\107\000\000\000\107\000\027\000\027\000\000\000\027\000\000\000\
\000\000\027\000\000\000\000\000\027\000\000\000\027\000\000\000\
\000\000\000\000\000\000\027\000\027\000\027\000\027\000\027\000\
\027\000\000\000\000\000\027\000\027\000\041\000\000\000\027\000\
\027\000\000\000\027\000\041\000\041\000\000\000\041\000\000\000\
\000\000\041\000\000\000\000\000\041\000\000\000\041\000\000\000\
\000\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\041\000\041\000\000\000\000\000\041\000\
\041\000\000\000\041\000\000\000\000\000\000\000\074\000\000\000\
\000\000\000\000\000\000\000\000\074\000\074\000\000\000\074\000\
\000\000\000\000\074\000\000\000\000\000\074\000\000\000\074\000\
\000\000\000\000\000\000\000\000\074\000\074\000\074\000\074\000\
\074\000\074\000\000\000\000\000\074\000\074\000\108\000\000\000\
\074\000\074\000\000\000\074\000\108\000\108\000\000\000\108\000\
\000\000\000\000\108\000\000\000\000\000\108\000\000\000\108\000\
\000\000\000\000\000\000\000\000\108\000\108\000\108\000\108\000\
\108\000\108\000\000\000\000\000\108\000\108\000\000\000\036\000\
\108\000\108\000\000\000\108\000\000\000\036\000\036\000\000\000\
\036\000\000\000\000\000\036\000\000\000\000\000\036\000\000\000\
\036\000\000\000\000\000\000\000\000\000\036\000\036\000\036\000\
\036\000\036\000\036\000\000\000\000\000\036\000\036\000\089\000\
\000\000\036\000\036\000\000\000\036\000\089\000\089\000\000\000\
\089\000\000\000\000\000\089\000\000\000\000\000\089\000\000\000\
\089\000\000\000\000\000\000\000\000\000\089\000\089\000\089\000\
\089\000\089\000\089\000\000\000\000\000\089\000\089\000\093\000\
\000\000\089\000\089\000\000\000\089\000\093\000\093\000\000\000\
\093\000\000\000\000\000\093\000\000\000\000\000\093\000\000\000\
\093\000\000\000\000\000\000\000\000\000\093\000\093\000\093\000\
\093\000\093\000\093\000\000\000\000\000\093\000\093\000\000\000\
\000\000\093\000\093\000\000\000\093\000\135\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\203\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\000\000\063\001\
\000\000\000\000\058\000\059\000\000\000\000\000\057\000\000\000\
\065\001\066\001\067\001\037\002\000\000\060\000\068\001\069\001\
\070\001\071\001\072\001\058\000\059\000\000\000\000\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\060\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\062\000\063\000\058\000\059\000\000\000\064\000\000\000\
\000\000\000\000\000\000\061\000\000\000\065\000\060\000\000\000\
\000\000\000\000\062\000\063\000\000\000\000\000\000\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\003\001\
\051\000\052\000\053\000\054\000\055\000\056\000\000\000\000\000\
\000\000\000\000\041\000\061\000\042\000\000\000\057\000\000\000\
\000\000\000\000\062\000\063\000\000\000\043\000\000\000\064\000\
\044\000\045\000\015\001\058\000\059\000\000\000\065\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\060\000\000\000\
\000\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\000\000\000\000\000\000\000\000\000\000\134\001\135\001\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\000\000\058\000\059\000\000\000\
\000\000\000\000\062\000\063\000\000\000\000\000\000\000\064\000\
\060\000\000\000\000\000\000\000\047\000\000\000\065\000\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\249\001\150\000\000\000\000\000\000\000\
\151\000\152\000\153\000\154\000\155\000\061\000\156\000\157\000\
\158\000\159\000\160\000\000\000\062\000\063\000\000\000\000\000\
\000\000\064\000\000\000\000\000\000\000\000\000\000\000\250\001\
\065\000\000\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\000\000\150\000\
\000\000\000\000\000\000\151\000\152\000\153\000\154\000\155\000\
\000\000\156\000\157\000\158\000\159\000\160\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\000\000\150\000\000\000\000\000\000\000\151\000\
\152\000\153\000\154\000\155\000\137\000\156\000\157\000\158\000\
\159\000\160\000\000\000\000\000\000\000\000\000\000\000\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\000\000\150\000\000\000\000\000\000\000\
\151\000\152\000\153\000\154\000\155\000\162\000\156\000\157\000\
\158\000\159\000\160\000\000\000\000\000\000\000\000\000\000\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\000\000\150\000\000\000\000\000\
\000\000\151\000\152\000\153\000\154\000\155\000\212\000\156\000\
\157\000\158\000\159\000\160\000\000\000\000\000\000\000\000\000\
\000\000\138\000\139\000\140\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\000\000\150\000\000\000\
\000\000\000\000\151\000\152\000\153\000\154\000\155\000\185\001\
\156\000\157\000\158\000\159\000\160\000\000\000\000\000\000\000\
\000\000\000\000\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\000\000\150\000\
\000\000\000\000\000\000\151\000\152\000\153\000\154\000\155\000\
\226\001\156\000\157\000\158\000\159\000\160\000\000\000\000\000\
\000\000\000\000\000\000\138\000\139\000\140\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\000\000\
\150\000\000\000\000\000\000\000\151\000\152\000\153\000\154\000\
\155\000\064\002\156\000\157\000\158\000\159\000\160\000\000\000\
\000\000\000\000\000\000\000\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\000\000\150\000\000\000\000\000\000\000\151\000\152\000\153\000\
\154\000\155\000\003\000\156\000\157\000\158\000\159\000\160\000\
\004\000\005\000\000\000\006\000\000\000\000\000\007\000\000\000\
\000\000\008\000\000\000\009\000\000\000\000\000\000\000\000\000\
\010\000\011\000\012\000\013\000\014\000\015\000\000\000\000\000\
\016\000\017\000\000\000\000\000\018\000\019\000\000\000\020\000\
\176\000\176\000\176\000\176\000\176\000\176\000\176\000\176\000\
\176\000\176\000\176\000\176\000\000\000\176\000\000\000\000\000\
\000\000\176\000\176\000\176\000\176\000\176\000\000\000\176\000\
\176\000\176\000\176\000\176\000\000\000\000\000\176\000\000\000\
\000\000\000\000\072\000\000\000\072\000\138\000\139\000\140\000\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\000\000\150\000\000\000\000\000\000\000\151\000\152\000\
\153\000\154\000\155\000\000\000\156\000\157\000\158\000\159\000\
\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\001\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\000\000\150\000\
\000\000\000\000\000\000\151\000\152\000\153\000\154\000\155\000\
\000\000\156\000\157\000\158\000\159\000\160\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\205\001\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\000\000\150\000\000\000\000\000\000\000\
\151\000\152\000\153\000\154\000\155\000\000\000\156\000\157\000\
\158\000\159\000\160\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\002\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\000\000\150\000\000\000\000\000\000\000\151\000\152\000\153\000\
\154\000\155\000\000\000\156\000\157\000\158\000\159\000\160\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\001\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\149\000\000\000\150\000\000\000\000\000\000\000\
\151\000\152\000\153\000\154\000\155\000\000\000\156\000\157\000\
\158\000\159\000\160\000\000\000\000\000\000\000\000\000\000\000\
\000\000\236\001\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\000\000\150\000\
\000\000\000\000\000\000\151\000\152\000\153\000\154\000\155\000\
\000\000\156\000\157\000\158\000\159\000\160\000\000\000\000\000\
\000\000\000\000\000\000\000\000\239\001\138\000\139\000\140\000\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\000\000\150\000\000\000\000\000\000\000\151\000\152\000\
\153\000\154\000\155\000\000\000\156\000\157\000\158\000\159\000\
\160\000\000\000\000\000\000\000\000\000\000\000\000\000\001\002\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\000\000\150\000\000\000\000\000\
\000\000\151\000\152\000\153\000\154\000\155\000\000\000\156\000\
\157\000\158\000\159\000\160\000\000\000\000\000\000\000\000\000\
\186\001\138\000\139\000\140\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\000\000\150\000\000\000\
\000\000\000\000\151\000\152\000\153\000\154\000\155\000\000\000\
\156\000\157\000\158\000\159\000\160\000\000\000\000\000\000\000\
\000\000\019\002\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\000\000\150\000\
\000\000\000\000\000\000\151\000\152\000\153\000\154\000\155\000\
\000\000\156\000\157\000\158\000\159\000\160\000\000\000\000\000\
\000\000\000\000\043\002\138\000\139\000\140\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\000\000\
\150\000\000\000\000\000\000\000\151\000\152\000\153\000\154\000\
\155\000\000\000\156\000\157\000\158\000\159\000\160\000\000\000\
\000\000\000\000\000\000\070\002\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\000\000\150\000\000\000\000\000\000\000\151\000\152\000\153\000\
\154\000\155\000\000\000\156\000\157\000\158\000\159\000\160\000\
\000\000\023\002\138\000\139\000\140\000\141\000\142\000\143\000\
\144\000\145\000\146\000\147\000\148\000\149\000\000\000\150\000\
\000\000\000\000\000\000\151\000\152\000\153\000\154\000\155\000\
\000\000\156\000\157\000\158\000\159\000\160\000\000\000\075\002\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\029\002\150\000\000\000\000\000\
\000\000\151\000\152\000\153\000\154\000\155\000\000\000\156\000\
\157\000\158\000\159\000\160\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\063\002\150\000\000\000\000\000\000\000\151\000\152\000\153\000\
\154\000\155\000\000\000\156\000\157\000\158\000\159\000\160\000\
\138\000\139\000\140\000\141\000\142\000\143\000\144\000\145\000\
\146\000\147\000\148\000\149\000\000\000\150\000\000\000\000\000\
\000\000\151\000\152\000\153\000\154\000\155\000\000\000\156\000\
\157\000\158\000\159\000\160\000\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\000\000\
\000\000\150\000\000\000\000\000\000\000\151\000\152\000\153\000\
\154\000\155\000\000\000\156\000\157\000\158\000\159\000\160\000\
\139\000\140\000\141\000\142\000\143\000\144\000\145\000\146\000\
\147\000\148\000\000\000\000\000\150\000\000\000\000\000\000\000\
\151\000\152\000\153\000\154\000\155\000\000\000\156\000\157\000\
\158\000\159\000\160\000\140\000\141\000\142\000\143\000\144\000\
\145\000\146\000\147\000\148\000\000\000\000\000\150\000\000\000\
\000\000\000\000\000\000\000\000\153\000\154\000\155\000\000\000\
\156\000\157\000\158\000\159\000\160\000\140\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\000\000\000\000\
\150\000\000\000\000\000\000\000\000\000\000\000\000\000\154\000\
\155\000\000\000\156\000\157\000\158\000\159\000\160\000\063\001\
\000\000\000\000\000\000\064\001\000\000\000\000\000\000\000\000\
\065\001\066\001\067\001\000\000\000\000\000\000\068\001\069\001\
\070\001\071\001\072\001\063\001\000\000\000\000\000\000\237\001\
\000\000\000\000\000\000\000\000\065\001\066\001\067\001\000\000\
\000\000\000\000\068\001\069\001\070\001\071\001\072\001\063\001\
\000\000\000\000\000\000\238\001\000\000\000\000\000\000\000\000\
\065\001\066\001\067\001\000\000\000\000\000\000\068\001\069\001\
\070\001\071\001\072\001\063\001\000\000\000\000\000\000\000\002\
\000\000\000\000\000\000\000\000\065\001\066\001\067\001\063\001\
\000\000\000\000\068\001\069\001\070\001\071\001\072\001\000\000\
\065\001\066\001\067\001\046\002\000\000\000\000\068\001\069\001\
\070\001\071\001\072\001\063\001\000\000\000\000\000\000\062\002\
\000\000\000\000\000\000\000\000\065\001\066\001\067\001\063\001\
\000\000\000\000\068\001\069\001\070\001\071\001\072\001\000\000\
\065\001\066\001\067\001\079\002\000\000\000\000\068\001\069\001\
\070\001\071\001\072\001"

let yycheck = "\005\000\
\171\000\037\000\184\000\009\000\114\001\081\001\003\000\133\001\
\000\001\015\001\000\001\000\001\198\001\021\001\001\001\022\001\
\000\000\031\001\011\000\012\000\013\000\014\000\066\001\016\000\
\017\000\018\000\019\000\020\000\001\001\000\001\000\001\000\001\
\001\000\001\001\001\001\064\001\211\001\064\001\001\001\096\001\
\166\001\068\001\086\001\037\001\007\001\032\001\009\001\091\001\
\064\001\066\001\068\001\000\001\068\001\059\000\041\001\061\000\
\062\000\063\000\064\000\065\000\089\001\024\001\047\000\090\001\
\082\001\028\001\078\001\030\001\082\001\086\001\000\000\088\001\
\035\001\089\001\091\001\185\001\068\001\040\001\085\001\085\001\
\073\000\157\001\090\001\001\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\088\001\066\001\088\001\088\001\026\001\070\001\071\001\072\001\
\073\001\074\001\025\002\076\001\077\001\078\001\079\001\080\001\
\030\001\119\000\022\001\088\001\122\000\088\001\088\001\176\001\
\089\001\088\001\000\001\015\001\130\000\088\001\111\000\124\000\
\113\000\114\000\115\000\061\002\138\000\139\000\140\000\141\000\
\142\000\143\000\144\000\145\000\146\000\147\000\148\000\149\000\
\001\001\151\000\152\000\153\000\154\000\155\000\156\000\157\000\
\158\000\159\000\160\000\000\001\015\001\000\000\017\001\001\001\
\000\001\015\002\004\001\078\001\006\001\007\001\084\001\019\001\
\020\001\019\001\088\001\177\000\022\001\170\000\088\001\172\000\
\173\000\085\001\015\001\164\000\017\001\187\000\175\000\176\000\
\178\001\170\000\088\001\172\000\173\000\088\001\068\001\022\001\
\017\001\085\001\179\000\180\000\019\001\020\001\090\001\022\001\
\017\001\068\001\066\001\088\001\082\001\066\001\212\000\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\064\001\
\201\000\082\001\083\001\068\001\000\000\088\001\086\001\016\001\
\089\001\086\001\085\001\012\001\068\001\014\001\057\002\090\001\
\226\001\088\001\076\001\077\001\029\001\030\001\023\001\081\001\
\090\001\026\001\027\001\054\001\001\001\001\001\088\001\040\001\
\085\001\034\001\077\002\085\001\249\000\009\001\085\001\012\001\
\090\001\014\001\007\001\090\001\085\001\072\001\085\001\248\000\
\075\001\191\001\023\001\090\001\085\001\026\001\027\001\082\001\
\088\001\083\001\024\001\025\001\069\001\034\001\001\001\089\001\
\083\001\086\001\065\001\076\001\077\001\013\001\009\001\070\001\
\081\001\000\000\073\001\019\001\020\001\031\002\022\001\088\001\
\076\001\025\001\039\001\086\001\028\001\086\001\030\001\053\001\
\084\001\055\001\089\001\035\001\036\001\037\001\038\001\039\001\
\040\001\068\001\043\001\043\001\044\001\046\001\047\001\047\001\
\048\001\086\001\050\001\086\001\064\001\083\001\064\002\001\001\
\068\001\086\001\072\001\089\001\089\001\075\001\075\001\009\001\
\010\001\075\002\076\002\013\001\082\001\082\001\061\001\093\001\
\085\001\019\001\020\001\066\001\022\001\089\001\088\001\025\001\
\083\001\103\001\028\001\083\001\030\001\107\001\032\001\033\001\
\001\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\009\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\083\001\065\001\001\001\000\000\083\001\083\001\133\001\
\134\001\135\001\001\001\089\001\089\001\068\001\012\001\032\001\
\014\001\083\001\088\001\010\001\070\001\083\001\068\001\089\001\
\041\001\023\001\068\001\089\001\026\001\027\001\156\001\068\001\
\049\001\083\001\068\001\083\001\034\001\163\001\001\001\089\001\
\166\001\089\001\033\001\148\001\068\001\171\001\009\001\083\001\
\068\001\007\001\013\001\177\001\066\001\089\001\045\001\046\001\
\019\001\020\001\049\001\022\001\083\001\001\001\025\001\001\001\
\083\001\028\001\089\001\030\001\194\001\032\001\089\001\001\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\004\001\
\043\001\044\001\001\001\209\001\047\001\048\001\049\001\050\001\
\086\001\004\001\083\001\089\001\082\001\089\001\083\001\000\000\
\089\001\061\001\224\001\065\001\089\001\001\001\228\001\083\001\
\070\001\071\001\072\001\073\001\225\001\089\001\010\001\083\001\
\229\001\013\001\078\001\079\001\080\001\089\001\083\001\019\001\
\020\001\247\001\022\001\089\001\089\001\025\001\065\001\086\001\
\028\001\088\001\030\001\083\001\091\001\033\001\083\001\035\001\
\036\001\037\001\038\001\039\001\040\001\089\001\083\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\083\001\
\083\001\023\002\024\002\082\001\070\001\083\001\087\001\029\002\
\030\002\089\001\032\002\087\001\034\002\087\001\066\001\083\001\
\065\001\000\001\001\001\066\001\042\002\070\001\071\001\087\001\
\073\001\086\001\009\001\010\001\083\001\083\001\013\001\070\001\
\015\001\055\002\017\001\018\001\019\001\020\001\000\000\022\001\
\089\001\063\002\025\001\087\001\084\001\028\001\068\001\030\001\
\001\001\032\001\033\001\068\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\088\001\088\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\066\001\001\001\001\001\088\001\070\001\
\071\001\072\001\073\001\074\001\085\001\076\001\077\001\078\001\
\079\001\080\001\090\001\082\001\083\001\004\001\085\001\018\001\
\087\001\049\001\089\001\090\001\000\001\001\001\001\001\084\001\
\082\001\075\001\085\001\089\001\015\001\009\001\010\001\061\001\
\089\001\013\001\007\001\015\001\091\001\017\001\018\001\019\001\
\020\001\000\000\022\001\085\001\084\001\025\001\017\001\021\001\
\028\001\086\001\030\001\089\001\032\001\033\001\019\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\049\001\
\082\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\075\001\
\031\001\066\001\070\001\071\001\072\001\073\001\074\001\084\001\
\076\001\077\001\078\001\079\001\080\001\068\001\082\001\083\001\
\087\001\085\001\066\001\087\001\022\001\089\001\090\001\000\001\
\001\001\015\001\084\001\019\001\082\001\085\001\017\001\082\001\
\009\001\010\001\022\001\001\001\013\001\087\001\015\001\017\001\
\017\001\018\001\019\001\020\001\000\000\022\001\090\001\022\001\
\025\001\085\001\090\001\028\001\085\001\030\001\017\001\032\001\
\033\001\018\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\090\001\085\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\018\001\022\001\085\001\022\000\070\001\071\001\072\001\
\073\001\074\001\175\000\076\001\077\001\078\001\079\001\080\001\
\202\000\082\001\083\001\061\001\085\001\040\001\087\001\044\001\
\089\001\090\001\172\000\097\000\169\000\168\000\000\001\001\001\
\079\001\106\000\076\001\077\001\078\001\079\001\080\001\009\001\
\010\001\175\001\014\002\013\001\255\001\015\001\069\002\017\001\
\018\001\019\001\020\001\000\000\022\001\074\002\069\002\025\001\
\255\001\113\001\028\001\186\001\030\001\186\001\032\001\033\001\
\116\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\255\255\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\065\001\
\255\255\255\255\255\255\255\255\070\001\071\001\072\001\073\001\
\074\001\255\255\076\001\077\001\078\001\079\001\080\001\255\255\
\082\001\083\001\255\255\085\001\255\255\087\001\255\255\089\001\
\090\001\000\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\255\255\255\255\028\001\255\255\030\001\
\255\255\032\001\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\065\001\255\255\255\255\255\255\255\255\070\001\
\071\001\072\001\073\001\074\001\255\255\076\001\077\001\078\001\
\079\001\080\001\255\255\082\001\083\001\255\255\085\001\255\255\
\087\001\255\255\089\001\090\001\000\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\255\255\255\255\
\028\001\255\255\030\001\255\255\032\001\033\001\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\255\255\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\255\255\062\001\063\001\064\001\065\001\255\255\255\255\
\255\255\255\255\070\001\071\001\072\001\073\001\074\001\255\255\
\076\001\077\001\078\001\079\001\080\001\061\001\082\001\083\001\
\255\255\085\001\066\001\087\001\255\255\089\001\090\001\255\255\
\255\255\255\255\255\255\000\001\001\001\255\255\078\001\079\001\
\080\001\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\025\001\255\255\255\255\028\001\
\255\255\030\001\255\255\032\001\033\001\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\255\255\255\255\255\255\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\076\001\
\077\001\078\001\079\001\080\001\255\255\082\001\083\001\255\255\
\085\001\255\255\087\001\255\255\089\001\090\001\000\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\255\255\255\255\028\001\255\255\030\001\255\255\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\255\255\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\255\255\062\001\063\001\064\001\065\001\
\255\255\255\255\255\255\255\255\070\001\071\001\072\001\073\001\
\074\001\255\255\076\001\077\001\078\001\079\001\080\001\255\255\
\082\001\083\001\255\255\085\001\255\255\087\001\255\255\089\001\
\090\001\000\001\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\255\255\255\255\028\001\255\255\030\001\
\255\255\032\001\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\255\255\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\255\255\062\001\
\063\001\064\001\065\001\255\255\255\255\255\255\255\255\070\001\
\071\001\072\001\073\001\074\001\255\255\076\001\077\001\078\001\
\079\001\080\001\255\255\082\001\083\001\255\255\085\001\255\255\
\087\001\255\255\089\001\090\001\255\255\255\255\255\255\255\255\
\000\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\255\255\030\001\255\255\
\032\001\033\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\255\255\062\001\063\001\
\064\001\065\001\255\255\255\255\255\255\255\255\070\001\071\001\
\072\001\073\001\074\001\255\255\076\001\077\001\255\255\061\001\
\255\255\255\255\082\001\083\001\066\001\085\001\255\255\087\001\
\255\255\089\001\090\001\000\001\001\001\255\255\076\001\077\001\
\078\001\079\001\080\001\255\255\009\001\010\001\255\255\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\025\001\255\255\255\255\028\001\
\255\255\030\001\255\255\032\001\033\001\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\255\255\255\255\255\255\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\076\001\
\077\001\255\255\255\255\255\255\255\255\082\001\083\001\255\255\
\085\001\255\255\087\001\255\255\089\001\090\001\000\001\001\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\019\001\020\001\000\000\022\001\255\255\255\255\025\001\
\255\255\255\255\028\001\255\255\030\001\255\255\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\255\255\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\255\255\062\001\063\001\064\001\065\001\
\255\255\255\255\255\255\255\255\070\001\071\001\072\001\073\001\
\074\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\082\001\083\001\255\255\085\001\255\255\087\001\255\255\089\001\
\090\001\255\255\255\255\255\255\255\255\000\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\255\255\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\255\255\
\255\255\028\001\255\255\030\001\255\255\032\001\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\255\255\062\001\063\001\064\001\065\001\255\255\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\255\255\059\001\060\001\061\001\062\001\063\001\082\001\
\083\001\066\001\085\001\255\255\087\001\255\255\089\001\090\001\
\000\001\001\001\255\255\076\001\077\001\078\001\079\001\080\001\
\255\255\009\001\010\001\255\255\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\255\255\030\001\255\255\
\032\001\033\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\255\255\062\001\063\001\
\064\001\065\001\255\255\255\255\255\255\255\255\070\001\071\001\
\072\001\073\001\074\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\082\001\083\001\255\255\085\001\255\255\087\001\
\255\255\089\001\090\001\000\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\009\001\010\001\255\255\255\255\
\013\001\255\255\015\001\255\255\017\001\018\001\019\001\020\001\
\000\000\022\001\255\255\255\255\025\001\255\255\255\255\028\001\
\255\255\030\001\255\255\032\001\033\001\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\255\255\062\001\063\001\064\001\065\001\255\255\255\255\255\255\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\082\001\083\001\255\255\
\085\001\255\255\087\001\255\255\089\001\090\001\255\255\255\255\
\255\255\255\255\000\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\255\255\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\032\001\033\001\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\255\255\053\001\
\054\001\055\001\056\001\057\001\058\001\255\255\255\255\255\255\
\255\255\255\255\064\001\065\001\255\255\255\255\255\255\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\082\001\083\001\255\255\085\001\
\255\255\087\001\255\255\089\001\090\001\000\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\255\255\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\255\255\
\255\255\028\001\255\255\030\001\255\255\032\001\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\255\255\255\255\255\255\255\255\255\255\064\001\065\001\255\255\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\082\001\
\083\001\255\255\085\001\255\255\087\001\255\255\089\001\090\001\
\000\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\255\255\255\255\013\001\255\255\015\001\
\255\255\017\001\018\001\019\001\020\001\000\000\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\255\255\030\001\255\255\
\032\001\033\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\255\255\255\255\255\255\255\255\
\064\001\065\001\255\255\255\255\255\255\255\255\070\001\071\001\
\072\001\073\001\074\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\082\001\083\001\255\255\085\001\255\255\087\001\
\255\255\089\001\090\001\255\255\255\255\255\255\255\255\000\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\013\001\255\255\015\001\255\255\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\255\255\255\255\028\001\255\255\030\001\255\255\032\001\
\033\001\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\255\255\255\255\255\255\255\255\255\255\064\001\
\065\001\255\255\255\255\255\255\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\082\001\083\001\255\255\085\001\255\255\087\001\255\255\
\089\001\090\001\000\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\255\255\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\032\001\033\001\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\255\255\053\001\
\054\001\065\001\255\255\057\001\058\001\255\255\070\001\071\001\
\072\001\073\001\064\001\065\001\076\001\077\001\255\255\065\001\
\070\001\071\001\072\001\255\255\070\001\071\001\072\001\073\001\
\255\255\089\001\076\001\077\001\082\001\083\001\255\255\085\001\
\255\255\087\001\255\255\089\001\090\001\000\001\001\001\089\001\
\255\255\255\255\255\255\255\255\255\255\255\255\009\001\010\001\
\255\255\255\255\013\001\255\255\015\001\255\255\017\001\018\001\
\019\001\020\001\000\000\022\001\255\255\255\255\025\001\255\255\
\255\255\028\001\255\255\030\001\255\255\032\001\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\053\001\054\001\255\255\255\255\057\001\058\001\
\255\255\255\255\255\255\255\255\255\255\064\001\065\001\001\001\
\255\255\255\255\255\255\070\001\071\001\072\001\255\255\255\255\
\255\255\255\255\012\001\255\255\014\001\255\255\255\255\082\001\
\083\001\255\255\085\001\255\255\087\001\023\001\089\001\090\001\
\026\001\027\001\255\255\255\255\000\001\001\001\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\255\255\255\255\
\028\001\255\255\030\001\255\255\032\001\033\001\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\255\255\053\001\054\001\255\255\086\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\064\001\065\001\255\255\255\255\
\255\255\255\255\070\001\071\001\072\001\015\001\255\255\017\001\
\255\255\019\001\020\001\021\001\022\001\255\255\082\001\083\001\
\255\255\085\001\255\255\087\001\255\255\089\001\090\001\000\001\
\001\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\013\001\255\255\015\001\255\255\
\017\001\018\001\019\001\020\001\000\000\022\001\255\255\255\255\
\025\001\255\255\255\255\028\001\255\255\030\001\255\255\032\001\
\033\001\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\085\001\053\001\054\001\255\255\255\255\
\090\001\061\001\255\255\255\255\255\255\255\255\255\255\064\001\
\065\001\255\255\070\001\071\001\072\001\070\001\071\001\255\255\
\076\001\077\001\078\001\079\001\080\001\255\255\255\255\255\255\
\255\255\082\001\083\001\255\255\085\001\089\001\087\001\255\255\
\089\001\090\001\000\001\001\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\009\001\010\001\255\255\255\255\013\001\
\255\255\015\001\255\255\017\001\018\001\019\001\020\001\000\000\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\032\001\033\001\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\065\001\255\255\053\001\
\054\001\255\255\070\001\071\001\072\001\073\001\255\255\255\255\
\076\001\077\001\064\001\065\001\001\001\255\255\255\255\255\255\
\070\001\255\255\007\001\255\255\255\255\089\001\255\255\012\001\
\255\255\014\001\255\255\255\255\082\001\083\001\255\255\085\001\
\255\255\087\001\023\001\089\001\090\001\026\001\027\001\255\255\
\255\255\000\001\001\001\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\255\255\013\001\255\255\
\015\001\255\255\017\001\018\001\019\001\020\001\000\000\022\001\
\255\255\255\255\025\001\255\255\255\255\028\001\255\255\030\001\
\255\255\032\001\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\255\255\053\001\054\001\
\065\001\086\001\255\255\255\255\255\255\070\001\071\001\072\001\
\073\001\064\001\065\001\076\001\077\001\078\001\079\001\080\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\089\001\255\255\255\255\082\001\083\001\255\255\085\001\255\255\
\087\001\255\255\089\001\090\001\000\001\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\255\255\
\255\255\013\001\255\255\015\001\255\255\017\001\018\001\019\001\
\020\001\000\000\022\001\255\255\255\255\025\001\255\255\255\255\
\028\001\255\255\030\001\255\255\032\001\033\001\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\055\001\
\056\001\053\001\054\001\059\001\060\001\061\001\062\001\063\001\
\255\255\255\255\066\001\255\255\064\001\065\001\255\255\255\255\
\255\255\073\001\074\001\255\255\076\001\077\001\078\001\079\001\
\080\001\255\255\255\255\255\255\255\255\255\255\082\001\083\001\
\255\255\085\001\255\255\087\001\255\255\089\001\090\001\000\001\
\001\001\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\009\001\010\001\255\255\255\255\013\001\255\255\015\001\255\255\
\017\001\018\001\019\001\020\001\255\255\022\001\255\255\255\255\
\025\001\255\255\255\255\028\001\255\255\030\001\255\255\032\001\
\033\001\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\065\001\255\255\053\001\255\255\255\255\070\001\
\071\001\072\001\073\001\255\255\255\255\076\001\077\001\064\001\
\065\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\089\001\255\255\012\001\255\255\014\001\255\255\
\255\255\082\001\083\001\255\255\085\001\255\255\087\001\023\001\
\089\001\090\001\026\001\027\001\255\255\255\255\000\001\001\001\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\009\001\
\010\001\255\255\255\255\013\001\255\255\015\001\255\255\017\001\
\018\001\019\001\020\001\255\255\022\001\255\255\255\255\025\001\
\255\255\255\255\028\001\255\255\030\001\255\255\032\001\033\001\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\255\255\000\000\255\255\065\001\086\001\255\255\
\255\255\255\255\070\001\071\001\072\001\073\001\064\001\065\001\
\076\001\077\001\078\001\079\001\080\001\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\089\001\255\255\255\255\
\082\001\083\001\012\001\085\001\014\001\087\001\255\255\089\001\
\090\001\255\255\001\001\255\255\255\255\023\001\255\255\255\255\
\026\001\027\001\009\001\010\001\255\255\255\255\013\001\255\255\
\034\001\255\255\255\255\255\255\019\001\020\001\255\255\022\001\
\255\255\000\000\025\001\255\255\255\255\028\001\255\255\030\001\
\255\255\032\001\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\255\255\255\255\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\255\255\066\001\086\001\255\255\255\255\070\001\
\255\255\072\001\072\001\255\255\075\001\001\001\076\001\077\001\
\078\001\079\001\080\001\082\001\083\001\009\001\010\001\000\000\
\255\255\013\001\089\001\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\022\001\255\255\255\255\025\001\255\255\255\255\
\028\001\255\255\030\001\255\255\032\001\033\001\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\255\255\255\255\054\001\000\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\070\001\016\001\072\001\000\000\255\255\075\001\
\255\255\009\001\010\001\255\255\255\255\013\001\082\001\083\001\
\029\001\030\001\255\255\019\001\020\001\089\001\022\001\255\255\
\255\255\025\001\255\255\040\001\028\001\255\255\030\001\255\255\
\032\001\033\001\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\061\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\070\001\071\001\072\001\073\001\255\255\
\069\001\076\001\077\001\078\001\079\001\080\001\061\001\076\001\
\077\001\000\000\255\255\255\255\081\001\255\255\070\001\084\001\
\071\001\072\001\255\255\088\001\001\001\076\001\077\001\078\001\
\079\001\080\001\255\255\083\001\009\001\010\001\255\255\255\255\
\013\001\089\001\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\255\255\255\255\025\001\255\255\255\255\028\001\
\255\255\030\001\255\255\032\001\033\001\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\000\000\
\065\001\255\255\255\255\255\255\255\255\070\001\071\001\072\001\
\073\001\255\255\001\001\076\001\077\001\078\001\079\001\080\001\
\255\255\070\001\009\001\010\001\255\255\255\255\013\001\255\255\
\089\001\255\255\255\255\255\255\019\001\020\001\083\001\022\001\
\255\255\255\255\025\001\255\255\089\001\028\001\255\255\030\001\
\255\255\032\001\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\255\255\065\001\255\255\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\255\255\
\001\001\076\001\077\001\078\001\079\001\080\001\255\255\070\001\
\009\001\010\001\255\255\255\255\013\001\255\255\089\001\255\255\
\255\255\255\255\019\001\020\001\083\001\022\001\255\255\255\255\
\025\001\255\255\089\001\028\001\255\255\030\001\255\255\032\001\
\033\001\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\070\001\009\001\010\001\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\083\001\022\001\255\255\255\255\025\001\255\255\
\089\001\028\001\255\255\030\001\000\000\032\001\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\009\001\010\001\255\255\000\000\013\001\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\255\255\022\001\
\083\001\255\255\025\001\255\255\255\255\028\001\089\001\030\001\
\255\255\032\001\033\001\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\061\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\070\001\071\001\072\001\073\001\
\255\255\255\255\076\001\077\001\078\001\079\001\080\001\255\255\
\001\001\255\255\232\000\233\000\234\000\235\000\255\255\255\255\
\000\000\010\001\255\255\255\255\013\001\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\083\001\022\001\255\255\255\255\
\025\001\255\255\089\001\028\001\255\255\030\001\255\255\255\255\
\033\001\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\000\000\255\255\066\001\255\255\255\255\
\065\001\070\001\071\001\072\001\073\001\074\001\255\255\076\001\
\077\001\078\001\079\001\080\001\255\255\255\255\255\255\255\255\
\255\255\255\255\083\001\255\255\255\255\255\255\087\001\255\255\
\089\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\000\000\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\255\255\255\255\066\001\255\255\255\255\255\255\255\255\
\071\001\072\001\073\001\074\001\001\001\076\001\077\001\078\001\
\079\001\080\001\104\001\255\255\106\001\010\001\255\255\255\255\
\013\001\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\255\255\000\000\025\001\255\255\255\255\028\001\
\255\255\030\001\255\255\255\255\033\001\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\001\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\010\001\255\255\
\255\255\013\001\255\255\000\000\255\255\255\255\255\255\019\001\
\020\001\255\255\022\001\255\255\162\001\025\001\255\255\255\255\
\028\001\255\255\030\001\255\255\255\255\033\001\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\255\255\001\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\010\001\
\255\255\000\000\013\001\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\255\255\022\001\255\255\255\255\025\001\255\255\
\255\255\028\001\255\255\030\001\255\255\255\255\033\001\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\237\001\
\238\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\000\002\019\001\020\001\255\255\022\001\255\255\
\000\000\025\001\255\255\255\255\028\001\255\255\030\001\255\255\
\032\001\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\255\255\043\001\044\001\255\255\028\002\047\001\
\048\001\049\001\050\001\255\255\001\001\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\255\255\255\255\025\001\255\255\255\255\028\001\
\062\002\030\001\255\255\032\001\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\044\001\
\001\001\000\000\047\001\048\001\049\001\050\001\255\255\255\255\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\022\001\255\255\255\255\
\025\001\255\255\255\255\028\001\255\255\030\001\255\255\032\001\
\255\255\000\000\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\043\001\044\001\001\001\255\255\047\001\048\001\
\049\001\050\001\255\255\255\255\009\001\255\255\255\255\255\255\
\013\001\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\022\001\000\000\255\255\025\001\255\255\255\255\028\001\
\255\255\030\001\255\255\032\001\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\043\001\044\001\
\013\001\255\255\047\001\048\001\049\001\050\001\019\001\020\001\
\255\255\022\001\000\000\255\255\025\001\255\255\255\255\028\001\
\255\255\030\001\255\255\255\255\255\255\255\255\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\044\001\
\255\255\255\255\047\001\048\001\255\255\050\001\013\001\255\255\
\255\255\255\255\000\000\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\025\001\255\255\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\255\255\043\001\044\001\255\255\255\255\
\047\001\048\001\255\255\050\001\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\013\001\255\255\047\001\
\048\001\255\255\050\001\019\001\020\001\255\255\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\013\001\255\255\047\001\
\048\001\255\255\050\001\019\001\020\001\255\255\022\001\255\255\
\255\255\025\001\255\255\255\255\028\001\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\255\255\255\255\043\001\044\001\255\255\255\255\047\001\
\048\001\255\255\050\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\255\255\022\001\
\255\255\255\255\025\001\255\255\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\255\255\043\001\044\001\013\001\255\255\
\047\001\048\001\255\255\050\001\019\001\020\001\255\255\022\001\
\255\255\255\255\025\001\255\255\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\255\255\043\001\044\001\255\255\013\001\
\047\001\048\001\255\255\050\001\255\255\019\001\020\001\255\255\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\013\001\
\255\255\047\001\048\001\255\255\050\001\019\001\020\001\255\255\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\013\001\
\255\255\047\001\048\001\255\255\050\001\019\001\020\001\255\255\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\255\255\
\255\255\047\001\048\001\255\255\050\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\000\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\061\001\
\255\255\255\255\029\001\030\001\255\255\255\255\016\001\255\255\
\070\001\071\001\072\001\073\001\255\255\040\001\076\001\077\001\
\078\001\079\001\080\001\029\001\030\001\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\040\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\255\255\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\255\255\
\255\255\076\001\077\001\029\001\030\001\255\255\081\001\255\255\
\255\255\255\255\255\255\069\001\255\255\088\001\040\001\255\255\
\255\255\255\255\076\001\077\001\255\255\255\255\255\255\081\001\
\255\255\255\255\255\255\255\255\255\255\255\255\088\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\012\001\069\001\014\001\255\255\016\001\255\255\
\255\255\255\255\076\001\077\001\255\255\023\001\255\255\081\001\
\026\001\027\001\084\001\029\001\030\001\255\255\088\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\040\001\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\069\001\255\255\029\001\030\001\255\255\
\255\255\255\255\076\001\077\001\255\255\255\255\255\255\081\001\
\040\001\255\255\255\255\255\255\086\001\255\255\088\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\022\001\066\001\255\255\255\255\255\255\
\070\001\071\001\072\001\073\001\074\001\069\001\076\001\077\001\
\078\001\079\001\080\001\255\255\076\001\077\001\255\255\255\255\
\255\255\081\001\255\255\255\255\255\255\255\255\255\255\022\001\
\088\001\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\076\001\077\001\078\001\079\001\080\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\255\255\066\001\255\255\255\255\255\255\070\001\
\071\001\072\001\073\001\074\001\042\001\076\001\077\001\078\001\
\079\001\080\001\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\255\255\255\255\
\070\001\071\001\072\001\073\001\074\001\042\001\076\001\077\001\
\078\001\079\001\080\001\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\255\255\066\001\255\255\255\255\
\255\255\070\001\071\001\072\001\073\001\074\001\042\001\076\001\
\077\001\078\001\079\001\080\001\255\255\255\255\255\255\255\255\
\255\255\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\255\255\255\255\070\001\071\001\072\001\073\001\074\001\042\001\
\076\001\077\001\078\001\079\001\080\001\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\074\001\
\042\001\076\001\077\001\078\001\079\001\080\001\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\255\255\
\066\001\255\255\255\255\255\255\070\001\071\001\072\001\073\001\
\074\001\042\001\076\001\077\001\078\001\079\001\080\001\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\255\255\066\001\255\255\255\255\255\255\070\001\071\001\072\001\
\073\001\074\001\013\001\076\001\077\001\078\001\079\001\080\001\
\019\001\020\001\255\255\022\001\255\255\255\255\025\001\255\255\
\255\255\028\001\255\255\030\001\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\255\255\
\043\001\044\001\255\255\255\255\047\001\048\001\255\255\050\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\255\255\066\001\255\255\255\255\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\076\001\
\077\001\078\001\079\001\080\001\255\255\255\255\083\001\255\255\
\255\255\255\255\087\001\255\255\089\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\066\001\255\255\255\255\255\255\070\001\071\001\
\072\001\073\001\074\001\255\255\076\001\077\001\078\001\079\001\
\080\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\089\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\076\001\077\001\078\001\079\001\080\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\089\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\255\255\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\076\001\077\001\
\078\001\079\001\080\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\089\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\255\255\066\001\255\255\255\255\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\076\001\077\001\078\001\079\001\080\001\
\255\255\255\255\255\255\255\255\255\255\255\255\087\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\066\001\255\255\255\255\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\076\001\077\001\
\078\001\079\001\080\001\255\255\255\255\255\255\255\255\255\255\
\255\255\087\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\076\001\077\001\078\001\079\001\080\001\255\255\255\255\
\255\255\255\255\255\255\255\255\087\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\066\001\255\255\255\255\255\255\070\001\071\001\
\072\001\073\001\074\001\255\255\076\001\077\001\078\001\079\001\
\080\001\255\255\255\255\255\255\255\255\255\255\255\255\087\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\255\255\066\001\255\255\255\255\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\076\001\
\077\001\078\001\079\001\080\001\255\255\255\255\255\255\255\255\
\085\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\066\001\255\255\
\255\255\255\255\070\001\071\001\072\001\073\001\074\001\255\255\
\076\001\077\001\078\001\079\001\080\001\255\255\255\255\255\255\
\255\255\085\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\076\001\077\001\078\001\079\001\080\001\255\255\255\255\
\255\255\255\255\085\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\255\255\
\066\001\255\255\255\255\255\255\070\001\071\001\072\001\073\001\
\074\001\255\255\076\001\077\001\078\001\079\001\080\001\255\255\
\255\255\255\255\255\255\085\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\255\255\066\001\255\255\255\255\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\076\001\077\001\078\001\079\001\080\001\
\255\255\082\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\066\001\
\255\255\255\255\255\255\070\001\071\001\072\001\073\001\074\001\
\255\255\076\001\077\001\078\001\079\001\080\001\255\255\082\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\065\001\066\001\255\255\255\255\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\076\001\
\077\001\078\001\079\001\080\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\255\255\255\255\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\076\001\077\001\078\001\079\001\080\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\255\255\066\001\255\255\255\255\
\255\255\070\001\071\001\072\001\073\001\074\001\255\255\076\001\
\077\001\078\001\079\001\080\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\062\001\063\001\255\255\
\255\255\066\001\255\255\255\255\255\255\070\001\071\001\072\001\
\073\001\074\001\255\255\076\001\077\001\078\001\079\001\080\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\061\001\
\062\001\063\001\255\255\255\255\066\001\255\255\255\255\255\255\
\070\001\071\001\072\001\073\001\074\001\255\255\076\001\077\001\
\078\001\079\001\080\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\255\255\255\255\066\001\255\255\
\255\255\255\255\255\255\255\255\072\001\073\001\074\001\255\255\
\076\001\077\001\078\001\079\001\080\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\062\001\063\001\255\255\255\255\
\066\001\255\255\255\255\255\255\255\255\255\255\255\255\073\001\
\074\001\255\255\076\001\077\001\078\001\079\001\080\001\061\001\
\255\255\255\255\255\255\065\001\255\255\255\255\255\255\255\255\
\070\001\071\001\072\001\255\255\255\255\255\255\076\001\077\001\
\078\001\079\001\080\001\061\001\255\255\255\255\255\255\065\001\
\255\255\255\255\255\255\255\255\070\001\071\001\072\001\255\255\
\255\255\255\255\076\001\077\001\078\001\079\001\080\001\061\001\
\255\255\255\255\255\255\065\001\255\255\255\255\255\255\255\255\
\070\001\071\001\072\001\255\255\255\255\255\255\076\001\077\001\
\078\001\079\001\080\001\061\001\255\255\255\255\255\255\065\001\
\255\255\255\255\255\255\255\255\070\001\071\001\072\001\061\001\
\255\255\255\255\076\001\077\001\078\001\079\001\080\001\255\255\
\070\001\071\001\072\001\073\001\255\255\255\255\076\001\077\001\
\078\001\079\001\080\001\061\001\255\255\255\255\255\255\065\001\
\255\255\255\255\255\255\255\255\070\001\071\001\072\001\061\001\
\255\255\255\255\076\001\077\001\078\001\079\001\080\001\255\255\
\070\001\071\001\072\001\073\001\255\255\255\255\076\001\077\001\
\078\001\079\001\080\001"

let yynames_const = "\
  DOLLAR\000\
  ACTION\000\
  ALIAS\000\
  ATTR\000\
  BOOL\000\
  CANON\000\
  CARD\000\
  CASE\000\
  COERCE\000\
  DEFAULT\000\
  DO\000\
  ELSE\000\
  ELSIF\000\
  ENDDO\000\
  ENDIF\000\
  ENUM\000\
  ERROR\000\
  EXTEND\000\
  FIX\000\
  FLOAT\000\
  FOR\000\
  FORMAT\000\
  IF\000\
  IN\000\
  IMAGE\000\
  INITIALA\000\
  INT\000\
  SWITCH\000\
  SYNTAX\000\
  THEN\000\
  VOLATILE\000\
  PORTS\000\
  USES\000\
  MACRO\000\
  EOF\000\
  NOT\000\
  OR\000\
  AND\000\
  LEQ\000\
  GEQ\000\
  EQU\000\
  NEQ\000\
  LEFT_SHIFT\000\
  RIGHT_SHIFT\000\
  DOUBLE_STAR\000\
  ROTATE_RIGHT\000\
  ROTATE_LEFT\000\
  DOUBLE_COLON\000\
  DOUBLE_DOT\000\
  BIT_LEFT\000\
  BIT_RIGHT\000\
  EQ\000\
  EXCLAM\000\
  PIPE\000\
  CIRC\000\
  AMPERS\000\
  GT\000\
  LT\000\
  SHARP\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  TILD\000\
  COLON\000\
  COMMA\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  LPAREN\000\
  RPAREN\000\
  SEMI\000\
  DOT\000\
  AROBAS\000\
  "

let yynames_block = "\
  ID\000\
  BIN_CONST\000\
  BIN_CONST_64\000\
  CARD_CONST\000\
  CARD_CONST_64\000\
  FIXED_CONST\000\
  STRING_CONST\000\
  LET\000\
  MEM\000\
  MODE\000\
  OP\000\
  REG\000\
  TYPE\000\
  VAR\000\
  PORT\000\
  RESOURCE\000\
  EXCEPTION\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    Obj.repr(
# 317 "parser.mly"
            ( Sem.final_checks (Iter.get_insts()) )
# 2278 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 321 "parser.mly"
    ( Irg.add_pos _1 !Lexer.file !Lexer.line;
			(_1, (!Lexer.file, !Lexer.line))
		)
# 2287 "parser.ml"
               : 'LocatedID))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MachineSpec) in
    Obj.repr(
# 326 "parser.mly"
               (   )
# 2294 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'specs) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'MachineSpec) in
    Obj.repr(
# 327 "parser.mly"
                     (   )
# 2302 "parser.ml"
               : 'specs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetDef) in
    Obj.repr(
# 332 "parser.mly"
  ( Irg.add_symbol (fst _1) (snd _1) )
# 2309 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeSpec) in
    Obj.repr(
# 334 "parser.mly"
  ( Sem.add_spec (fst _1) (snd _1) )
# 2316 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemorySpec) in
    Obj.repr(
# 336 "parser.mly"
  ( sanity_check (fst _1); Sem.add_spec (fst _1) (snd _1) )
# 2323 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'RegisterSpec) in
    Obj.repr(
# 338 "parser.mly"
  ( sanity_check (fst _1) (*Sem.add_spec (fst $1) (snd $1)*) )
# 2330 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PortSpec) in
    Obj.repr(
# 340 "parser.mly"
  ( sanity_check (fst _1) (*Sem.add_spec (fst $1) (snd $1)*) )
# 2337 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ModeSpec) in
    Obj.repr(
# 342 "parser.mly"
  ( sanity_check (fst _1); Sem.add_spec (fst _1) (snd _1); )
# 2344 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'OpSpec) in
    Obj.repr(
# 344 "parser.mly"
  ( sanity_check (fst _1); Sem.add_spec (fst _1) (snd _1); )
# 2351 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ResourceSpec) in
    Obj.repr(
# 346 "parser.mly"
  ( )
# 2358 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ExceptionSpec) in
    Obj.repr(
# 348 "parser.mly"
  ( )
# 2365 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ExtendSpec) in
    Obj.repr(
# 350 "parser.mly"
  ( )
# 2372 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CanonSpec) in
    Obj.repr(
# 352 "parser.mly"
  ( Irg.add_symbol (fst _1) (snd _1); Irg.add_canon (fst _1) (snd _1) )
# 2379 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 354 "parser.mly"
  ( top_if _2 )
# 2386 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 356 "parser.mly"
  ( top_else () )
# 2392 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 358 "parser.mly"
  ( top_elsif _2  )
# 2399 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 360 "parser.mly"
  ( top_endif () )
# 2405 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 362 "parser.mly"
  ( illegal () )
# 2411 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 364 "parser.mly"
  ( illegal () )
# 2417 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'VarSpec) in
    Obj.repr(
# 367 "parser.mly"
  ( Sem.add_spec (fst _1) (snd _1) )
# 2424 "parser.ml"
               : 'MachineSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'OptStar) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 371 "parser.mly"
                                    (  (fst _3, Sem.make_let _3 Irg.NO_TYPE _5 _2) )
# 2434 "parser.ml"
               : 'LetDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'OptStar) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 372 "parser.mly"
                                              (  (fst _3, Sem.make_let _3 _5 _7 _2) )
# 2445 "parser.ml"
               : 'LetDef))
; (fun __caml_parser_env ->
    Obj.repr(
# 377 "parser.mly"
  ( false )
# 2451 "parser.ml"
               : 'OptStar))
; (fun __caml_parser_env ->
    Obj.repr(
# 379 "parser.mly"
  ( true )
# 2457 "parser.ml"
               : 'OptStar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ResourceList) in
    Obj.repr(
# 383 "parser.mly"
                       ( _2 )
# 2465 "parser.ml"
               : 'ResourceSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Resource) in
    Obj.repr(
# 387 "parser.mly"
            ( [_1] )
# 2472 "parser.ml"
               : 'ResourceList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ResourceList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Resource) in
    Obj.repr(
# 388 "parser.mly"
                              ( _3::_1 )
# 2480 "parser.ml"
               : 'ResourceList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 392 "parser.mly"
                 ( Irg.add_symbol (fst _1) (Irg.RES (fst _1)); _1 )
# 2487 "parser.ml"
               : 'Resource))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'LocatedID) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Int32.t) in
    Obj.repr(
# 393 "parser.mly"
                                     ( Irg.add_symbol (fst _1) (Irg.RES (fst _1)); _1 )
# 2495 "parser.ml"
               : 'Resource))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'CanonParamList) in
    Obj.repr(
# 398 "parser.mly"
  ( (_2, Irg.CANON_DEF(_2, Irg.CANON_FUNC, Irg.NO_TYPE, List.rev _4)) )
# 2503 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'CanonParamList) in
    Obj.repr(
# 400 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_FUNC, _2, List.rev _5)) )
# 2512 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 402 "parser.mly"
  ( (_2, Irg.CANON_DEF(_2, Irg.CANON_FUNC, Irg.NO_TYPE, [])) )
# 2519 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 404 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_FUNC, _2, [])) )
# 2527 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 406 "parser.mly"
  ( (_3, Irg.CANON_DEF(_3, Irg.CANON_CNST, _2, [])) )
# 2535 "parser.ml"
               : 'CanonSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CanonParam) in
    Obj.repr(
# 410 "parser.mly"
                 ( [_1] )
# 2542 "parser.ml"
               : 'CanonParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'CanonParamList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'CanonParam) in
    Obj.repr(
# 411 "parser.mly"
                                  ( _3::_1 )
# 2550 "parser.ml"
               : 'CanonParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 415 "parser.mly"
          ( _1 )
# 2557 "parser.ml"
               : 'CanonParam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 416 "parser.mly"
                       ( _3 )
# 2565 "parser.ml"
               : 'CanonParam))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'IdentifierList) in
    Obj.repr(
# 420 "parser.mly"
                          ( _2 )
# 2573 "parser.ml"
               : 'ExceptionSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 424 "parser.mly"
                ( [_1] )
# 2580 "parser.ml"
               : 'IdentifierList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'IdentifierList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LocatedID) in
    Obj.repr(
# 425 "parser.mly"
                                 ( _3::_1 )
# 2588 "parser.ml"
               : 'IdentifierList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 430 "parser.mly"
  ( (fst _2, Sem.make_type _2 _4) )
# 2597 "parser.ml"
               : 'TypeSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 435 "parser.mly"
  ( Irg.BOOL )
# 2603 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 437 "parser.mly"
  ( Irg.INT (Sem.to_int (Sem.eval_const _3)) )
# 2610 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 439 "parser.mly"
  ( syntax_error "syntax of int should be: int(SIZE)" )
# 2616 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 441 "parser.mly"
  ( Irg.CARD (Sem.to_int (Sem.eval_const _3)) )
# 2623 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 443 "parser.mly"
  ( syntax_error "syntax of card should be: card(SIZE)" )
# 2629 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 445 "parser.mly"
  ( Irg.FIX (
			Sem.to_int (Sem.eval_const _3),
			Sem.to_int (Sem.eval_const _5)) )
# 2639 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 449 "parser.mly"
  ( Irg.FLOAT (
			Sem.to_int (Sem.eval_const _3),
			Sem.to_int (Sem.eval_const _5)) )
# 2649 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'LetExpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'LetExpr) in
    Obj.repr(
# 453 "parser.mly"
  (
		let v1=Sem.to_int32 (Sem.eval_const _2)
		and v2=Sem.to_int32 (Sem.eval_const _4)
		in
		if ((Int32.compare v1 v2)<=0)
			then Irg.RANGE (v1,v2)
			else
				Irg.error (Irg.output [
					Irg.PTEXT "In a range type declaration, the first operand must be lesser than the second\n";
					Irg.PTEXT (Printf.sprintf "Value of the first operand : %d\n Value of the second operand : %d"
						(Int32.to_int v1) (Int32.to_int v2))])
		 )
# 2668 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ValueList) in
    Obj.repr(
# 466 "parser.mly"
  ( Irg.ENUM (Sem.make_enum_values _3) )
# 2675 "parser.ml"
               : 'TypeExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Value) in
    Obj.repr(
# 469 "parser.mly"
                      ( _1 )
# 2682 "parser.ml"
               : 'ValueList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ValueList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Value) in
    Obj.repr(
# 470 "parser.mly"
                           ( _1 @ _3 )
# 2690 "parser.ml"
               : 'ValueList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 473 "parser.mly"
                     ( [Sem.to_int32 (Sem.eval_const _1)] )
# 2697 "parser.ml"
               : 'Value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 474 "parser.mly"
                               ( Sem.enum_values (Sem.to_int32 (Sem.eval_const _1)) (Sem.to_int32 (Sem.eval_const _3)) )
# 2705 "parser.ml"
               : 'Value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 478 "parser.mly"
       ( _1 )
# 2712 "parser.ml"
               : 'LetExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'MemPart) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 483 "parser.mly"
  ( (fst _2, Sem.make_mem _2 (fst _4) (snd _4) _6) )
# 2722 "parser.ml"
               : 'MemorySpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'RegPart) in
    Obj.repr(
# 487 "parser.mly"
 ( Sem.add_spec (fst _2) (Sem.make_reg _2 (fst _4) (snd _4) []); _2 )
# 2731 "parser.ml"
               : 'RegisterSpecHeader))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'RegisterSpecHeader) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 491 "parser.mly"
  ( Sem.add_atts (fst _1) _2; Irg.attr_unstack _2; _1 )
# 2739 "parser.ml"
               : 'RegisterSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'PortPart) in
    Obj.repr(
# 495 "parser.mly"
    ( Sem.add_spec (fst _2) (Sem.make_port _2 (fst _4) (snd _4) []); _2 )
# 2748 "parser.ml"
               : 'PortSpecHeader))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'PortSpecHeader) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 500 "parser.mly"
        ( Sem.add_atts (fst _1) _2; Irg.attr_unstack _2; _1 )
# 2756 "parser.ml"
               : 'PortSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'RegPart) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalMemAttrDefList) in
    Obj.repr(
# 505 "parser.mly"
  ( (fst _2, Sem.make_var _2 (fst _4) (snd _4) _6) )
# 2766 "parser.ml"
               : 'VarSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 509 "parser.mly"
                      ( Sem.to_int (Sem.eval_const _1), _3 )
# 2774 "parser.ml"
               : 'MemPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 510 "parser.mly"
            ( Sem.to_int (Sem.eval_const _1), Irg.INT 8 )
# 2781 "parser.ml"
               : 'MemPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 514 "parser.mly"
                      ( Sem.to_int (Sem.eval_const _1), _3 )
# 2789 "parser.ml"
               : 'RegPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 515 "parser.mly"
         ( 1, _1 )
# 2796 "parser.ml"
               : 'RegPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'LetExpr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 519 "parser.mly"
                     ( Sem.to_int (Sem.eval_const _1), _3)
# 2804 "parser.ml"
               : 'PortPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 520 "parser.mly"
         ( 1, _1 )
# 2811 "parser.ml"
               : 'PortPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 524 "parser.mly"
           ( _1 )
# 2818 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 525 "parser.mly"
       ( Sem.type_from_id _1 )
# 2825 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    Obj.repr(
# 529 "parser.mly"
              ( [] )
# 2831 "parser.ml"
               : 'OptionalMemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDefList) in
    Obj.repr(
# 530 "parser.mly"
                  ( _1 )
# 2838 "parser.ml"
               : 'OptionalMemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDef) in
    Obj.repr(
# 534 "parser.mly"
              ( [_1] )
# 2845 "parser.ml"
               : 'MemAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'MemAttrDefList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'MemAttrDef) in
    Obj.repr(
# 535 "parser.mly"
                            ( _2::_1 )
# 2853 "parser.ml"
               : 'MemAttrDefList))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 540 "parser.mly"
  ( Sem.make_expr_attr "volatile" (Irg.CONST (Irg.NO_TYPE, Sem.eval_const _3)) )
# 2860 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'LetExpr) in
    Obj.repr(
# 542 "parser.mly"
  ( Sem.make_expr_attr "init" (Irg.CONST (Irg.NO_TYPE, Sem.eval_const _3)) )
# 2867 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Int32.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 544 "parser.mly"
  ( Irg.ATTR_USES )
# 2875 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesDef) in
    Obj.repr(
# 546 "parser.mly"
  ( Irg.ATTR_USES )
# 2882 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'MemLocation) in
    Obj.repr(
# 548 "parser.mly"
  ( Irg.ATTR_LOC ("alias", _3) )
# 2889 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 550 "parser.mly"
  ( Sem.make_expr_attr _1 _3 )
# 2897 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 552 "parser.mly"
  ( Sem.make_stat_attr _1 _4 )
# 2905 "parser.ml"
               : 'MemAttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'MemLocBase) in
    Obj.repr(
# 557 "parser.mly"
  ( Irg.LOC_REF (Sem.get_loc_ref_type (fst _1), fst _1, snd _1, Irg.NONE, Irg.NONE) )
# 2912 "parser.ml"
               : 'MemLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'MemLocBase) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 559 "parser.mly"
  (  Irg.LOC_REF (Sem.get_loc_ref_type (fst _1), fst _1, snd _1, _3, _5) )
# 2921 "parser.ml"
               : 'MemLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 564 "parser.mly"
  ( (_1, Irg.NONE) )
# 2928 "parser.ml"
               : 'MemLocBase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 566 "parser.mly"
  ( (_1, Irg.CONST (Irg.CARD(32), Sem.eval_const _3)) )
# 2936 "parser.ml"
               : 'MemLocBase))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ParamList) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalModeExpr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 571 "parser.mly"
  (
			Irg.param_unstack _4;
			Irg.attr_unstack _7;
			(fst _2, Sem.make_and_mode _2 _4 _6 _7)
		)
# 2951 "parser.ml"
               : 'ModeSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Identifier_Or_List) in
    Obj.repr(
# 577 "parser.mly"
  ( (fst _2, Sem.make_or_mode _2 _4) )
# 2960 "parser.ml"
               : 'ModeSpec))
; (fun __caml_parser_env ->
    Obj.repr(
# 583 "parser.mly"
             ( Irg.NONE )
# 2966 "parser.ml"
               : 'OptionalModeExpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 584 "parser.mly"
           ( _2 )
# 2973 "parser.ml"
               : 'OptionalModeExpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ParamList) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 589 "parser.mly"
  (
			Irg.param_unstack _4;
			Irg.attr_unstack _6;			
			(fst _2, Sem.make_and_op _2 _4 _6)
		)
# 2987 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'LocatedID) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Identifier_Or_List) in
    Obj.repr(
# 595 "parser.mly"
  ( (fst _2, Sem.make_or_op _2 _4) )
# 2996 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'LocatedID) in
    Obj.repr(
# 597 "parser.mly"
  ( raise (Irg.SyntaxError "missing '=' or '('") )
# 3004 "parser.ml"
               : 'OpSpec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ExtendHeader) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDefList) in
    Obj.repr(
# 604 "parser.mly"
  (
			let (syms, pars, cattrs) = _1 in
			let extend_spec s =
				match s with
				| Irg.AND_MODE (id, pars, expr, attrs) ->
					Irg.rm_symbol id;
					Irg.add_symbol id (Irg.AND_MODE (id, pars, expr, attrs @ _2))
				| Irg.AND_OP (id, pars, attrs) ->
					Irg.rm_symbol id;
					Irg.add_symbol id (Irg.AND_OP (id, pars, attrs @ _2));
				| _ -> () in
			Irg.param_unstack pars;
			Irg.attr_unstack _2;
			Irg.attr_unstack cattrs;
			List.iter extend_spec syms
		)
# 3027 "parser.ml"
               : 'ExtendSpec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ExtendIDList) in
    Obj.repr(
# 625 "parser.mly"
  ( let (_, pars, attrs) = _2 in Irg.attr_stack attrs; Irg.param_stack pars; _2 )
# 3034 "parser.ml"
               : 'ExtendHeader))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 631 "parser.mly"
  ( get_spec_extend _1 )
# 3041 "parser.ml"
               : 'ExtendIDList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ExtendIDList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 633 "parser.mly"
  ( join_extend (get_spec_extend _3) _1 )
# 3049 "parser.ml"
               : 'ExtendIDList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 639 "parser.mly"
           ( [_1] )
# 3056 "parser.ml"
               : 'Identifier_Or_List))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Identifier_Or_List) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 640 "parser.mly"
                                ( _3::_1 )
# 3064 "parser.ml"
               : 'Identifier_Or_List))
; (fun __caml_parser_env ->
    Obj.repr(
# 644 "parser.mly"
                  ( [] )
# 3070 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ParamListPart) in
    Obj.repr(
# 645 "parser.mly"
                    ( Irg.add_param _1; [_1] )
# 3077 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ParamList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ParamListPart) in
    Obj.repr(
# 646 "parser.mly"
                                ( Irg.add_param _3; _3::_1 )
# 3085 "parser.ml"
               : 'ParamList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ParaType) in
    Obj.repr(
# 650 "parser.mly"
                       ( Sem.check_param_exists _1; (_1, _3) )
# 3093 "parser.ml"
               : 'ParamListPart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'TypeExpr) in
    Obj.repr(
# 654 "parser.mly"
          ( Irg.TYPE_EXPR _1 )
# 3100 "parser.ml"
               : 'ParaType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 655 "parser.mly"
      ( Irg.TYPE_ID _1 )
# 3107 "parser.ml"
               : 'ParaType))
; (fun __caml_parser_env ->
    Obj.repr(
# 659 "parser.mly"
               ( [] )
# 3113 "parser.ml"
               : 'AttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NOAttrDefList) in
    Obj.repr(
# 660 "parser.mly"
                  ( _1 )
# 3120 "parser.ml"
               : 'AttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDef) in
    Obj.repr(
# 664 "parser.mly"
              ( [_1] )
# 3127 "parser.ml"
               : 'NOAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'NOAttrDefList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AttrDef) in
    Obj.repr(
# 665 "parser.mly"
                        ( _2::_1 )
# 3135 "parser.ml"
               : 'NOAttrDefList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AttrID) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 672 "parser.mly"
  ( Sem.make_expr_attr _1 _3 )
# 3143 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'AttrID) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 674 "parser.mly"
  ( Sem.make_stat_attr _1 _4 )
# 3151 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AttrID) in
    Obj.repr(
# 676 "parser.mly"
  ( raise (Irg.SyntaxError "attributes only accept expressions, { } actions or use clauses.") )
# 3158 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AttrID) in
    Obj.repr(
# 678 "parser.mly"
   ( raise (Irg.SyntaxError "missing '=' in attribute definition") )
# 3165 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesDef) in
    Obj.repr(
# 680 "parser.mly"
  ( Irg.ATTR_USES )
# 3172 "parser.ml"
               : 'AttrDef))
; (fun __caml_parser_env ->
    Obj.repr(
# 685 "parser.mly"
  ( Sem.attr_env := "syntax"; !Sem.attr_env )
# 3178 "parser.ml"
               : 'AttrID))
; (fun __caml_parser_env ->
    Obj.repr(
# 687 "parser.mly"
  ( Sem.attr_env := "image"; !Sem.attr_env )
# 3184 "parser.ml"
               : 'AttrID))
; (fun __caml_parser_env ->
    Obj.repr(
# 690 "parser.mly"
  ( Sem.attr_env := "action"; !Sem.attr_env )
# 3190 "parser.ml"
               : 'AttrID))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 692 "parser.mly"
  ( Sem.attr_env := _1; !Sem.attr_env )
# 3197 "parser.ml"
               : 'AttrID))
; (fun __caml_parser_env ->
    Obj.repr(
# 697 "parser.mly"
             ( Irg.NOP )
# 3203 "parser.ml"
               : 'Sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'StatementList) in
    Obj.repr(
# 698 "parser.mly"
                     ( _1 )
# 3210 "parser.ml"
               : 'Sequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Statement) in
    Obj.repr(
# 703 "parser.mly"
  ( line _1 )
# 3217 "parser.ml"
               : 'StatementList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'StatementList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Statement) in
    Obj.repr(
# 705 "parser.mly"
  ( handle_stat (fun _ -> Irg.SEQ (_1, line _3)) )
# 3225 "parser.ml"
               : 'StatementList))
; (fun __caml_parser_env ->
    Obj.repr(
# 710 "parser.mly"
  ( line Irg.NOP )
# 3231 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 712 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_eval "" "action") )
# 3237 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 714 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_eval "" _1) )
# 3244 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 716 "parser.mly"
  ( syntax_error (Printf.sprintf "unreduced macro '%s'" _1) )
# 3251 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 718 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_eval _1 "action") )
# 3258 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 720 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_eval _1 _3) )
# 3266 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Location) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 722 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_set _1 _3) )
# 3274 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ConditionalStatement) in
    Obj.repr(
# 724 "parser.mly"
  ( _1 )
# 3281 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ArgList) in
    Obj.repr(
# 726 "parser.mly"
  ( handle_stat (fun _ -> Sem.test_canonical _1; Sem.build_canonical_stat _1 (List.rev _3)) )
# 3289 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 728 "parser.mly"
  ( handle_stat (fun _ -> Irg.ERROR _3) )
# 3296 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 730 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_local _2 _4) )
# 3305 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 732 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_typed_local _2 _4 _6) )
# 3315 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 734 "parser.mly"
  ( syntax_error "syntax error: let [: type] = expression;" )
# 3323 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'ForHeader) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Sequence) in
    Obj.repr(
# 736 "parser.mly"
  ( handle_stat (fun _ -> Sem.make_for _1 _3) )
# 3331 "parser.ml"
               : 'Statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 741 "parser.mly"
  ( Sem.prepare_for _2 Irg.NO_TYPE _4 _6 )
# 3340 "parser.ml"
               : 'ForHeader))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 743 "parser.mly"
  ( Sem.prepare_for _2 _4 _6 _8 )
# 3350 "parser.ml"
               : 'ForHeader))
; (fun __caml_parser_env ->
    Obj.repr(
# 747 "parser.mly"
             ( [] )
# 3356 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 748 "parser.mly"
       ( [_1] )
# 3363 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ArgList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 749 "parser.mly"
                      ( _3::_1 )
# 3371 "parser.ml"
               : 'ArgList))
; (fun __caml_parser_env ->
    Obj.repr(
# 754 "parser.mly"
  ( None )
# 3377 "parser.ml"
               : 'Opt_Bit_Optr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 756 "parser.mly"
  ( None )
# 3385 "parser.ml"
               : 'Opt_Bit_Optr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 761 "parser.mly"
  ( Sem.make_access_loc _1 Irg.NONE Irg.NONE Irg.NONE )
# 3392 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 763 "parser.mly"
  ( Sem.make_access_loc _1 Irg.NONE _3 _5 )
# 3401 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 765 "parser.mly"
  ( Sem.make_access_loc _1 _3 Irg.NONE Irg.NONE )
# 3409 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 767 "parser.mly"
  ( Sem.make_access_loc _1 _3 _6 _8 )
# 3419 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Location) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Location) in
    Obj.repr(
# 769 "parser.mly"
  ( Sem.make_concat_loc _1 _3 )
# 3427 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Location) in
    Obj.repr(
# 771 "parser.mly"
   ( _2 )
# 3434 "parser.ml"
               : 'Location))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElse) in
    Obj.repr(
# 777 "parser.mly"
  ( Irg.IF_STAT (_2, _4, _5) )
# 3443 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Sequence) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElse) in
    Obj.repr(
# 779 "parser.mly"
  ( raise (Irg.SyntaxError "missing endif") )
# 3452 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'Sequence) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'Sequence) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElse) in
    Obj.repr(
# 781 "parser.mly"
  ( Irg.IF_STAT (_2, _4, Irg.IF_STAT (_6, _8, _9)) )
# 3463 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'CaseBody) in
    Obj.repr(
# 783 "parser.mly"
  (Irg.SWITCH_STAT (_3, fst _6, snd _6))
# 3471 "parser.ml"
               : 'ConditionalStatement))
; (fun __caml_parser_env ->
    Obj.repr(
# 786 "parser.mly"
             ( Irg.NOP )
# 3477 "parser.ml"
               : 'OptionalElse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 787 "parser.mly"
                ( _2 )
# 3484 "parser.ml"
               : 'OptionalElse))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseList) in
    Obj.repr(
# 792 "parser.mly"
          ( (_1,Irg.NOP) )
# 3491 "parser.ml"
               : 'CaseBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'OptCaseList) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Default) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'OptCaseList) in
    Obj.repr(
# 793 "parser.mly"
                                  ( (_1@_3,_2) )
# 3500 "parser.ml"
               : 'CaseBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 796 "parser.mly"
             ( [] )
# 3506 "parser.ml"
               : 'OptCaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseList) in
    Obj.repr(
# 797 "parser.mly"
           ( _1 )
# 3513 "parser.ml"
               : 'OptCaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseStat) in
    Obj.repr(
# 801 "parser.mly"
             ( [_1]	)
# 3520 "parser.ml"
               : 'CaseList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'CaseList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'CaseStat) in
    Obj.repr(
# 802 "parser.mly"
                     ( _2::_1 )
# 3528 "parser.ml"
               : 'CaseList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 805 "parser.mly"
                          ( (_2,_4) )
# 3536 "parser.ml"
               : 'CaseStat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Sequence) in
    Obj.repr(
# 809 "parser.mly"
                        (_3)
# 3543 "parser.ml"
               : 'Default))
; (fun __caml_parser_env ->
    Obj.repr(
# 814 "parser.mly"
  ( in_format := true; )
# 3549 "parser.ml"
               : 'EnterFormat))
; (fun __caml_parser_env ->
    Obj.repr(
# 820 "parser.mly"
  ( in_format := false; )
# 3555 "parser.ml"
               : 'LeaveFormat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 826 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_coerce _3 _5) )
# 3563 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 828 "parser.mly"
  ( syntax_error "syntax of coerce should be: coerce(TYPE, EXPRESSION)" )
# 3569 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'EnterFormat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'ArgList) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'LeaveFormat) in
    Obj.repr(
# 830 "parser.mly"
  ( eline (Sem.build_format _3 _6 !Sem.attr_env) )
# 3579 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 832 "parser.mly"
  ( syntax_error "syntax error in format expression" )
# 3585 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ArgList) in
    Obj.repr(
# 834 "parser.mly"
  ( eline (Sem.make_canon_expr _1 (List.rev _3)) )
# 3593 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 836 "parser.mly"
  ( eline (Sem.make_field_expr _1 "syntax") )
# 3600 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 838 "parser.mly"
  ( eline (Sem.make_field_expr _1 "image") )
# 3607 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 840 "parser.mly"
  ( eline (Sem.make_field_expr _1 _3) )
# 3615 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 842 "parser.mly"
  ( eline (Sem.get_binop _1 _3 Irg.CONCAT) )
# 3623 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 844 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_ref _1) )
# 3630 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 846 "parser.mly"
  ( raise (Irg.SyntaxError (Printf.sprintf "unreduced macro %s here" _1)) )
# 3637 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 848 "parser.mly"
  (
		let id = Sem.unalias_local _1 in
		if Irg.is_defined id then
			if (Sem.is_location id) || (Sem.is_loc_spe id)  || (Sem.is_loc_mode id)
				then
					eline (Irg.ITEMOF ((Sem.get_type_ident id), id, _3))
				else
					Irg.error (Irg.output [Irg.PTEXT _1; Irg.PTEXT " is not a valid location: type is "])
		else Irg.error (Irg.asis (Printf.sprintf "the keyword %s is undefined\n" _1))
		)
# 3654 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 859 "parser.mly"
  ( syntax_error "unclosed bracket expression" )
# 3661 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Bit_Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 861 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_bitfield _1 _3 _5) )
# 3670 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 863 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.ADD) )
# 3678 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 865 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.SUB) )
# 3686 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 867 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.MUL) )
# 3694 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 869 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.DIV) )
# 3702 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 871 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.MOD) )
# 3710 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 873 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.EXP) )
# 3718 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 875 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LSHIFT) )
# 3726 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 877 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.RSHIFT) )
# 3734 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 879 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LROTATE) )
# 3742 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 881 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.RROTATE) )
# 3750 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 883 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LT) )
# 3758 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 885 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.GT) )
# 3766 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 887 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.LE) )
# 3774 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 889 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.GE) )
# 3782 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 891 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.EQ) )
# 3790 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 893 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.NE) )
# 3798 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 895 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_AND) )
# 3806 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 897 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_XOR) )
# 3814 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 899 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.BIN_OR) )
# 3822 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 901 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.NOT) )
# 3829 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 903 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.BIN_NOT) )
# 3836 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 905 "parser.mly"
  ( _2 )
# 3843 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 907 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_unop _2 Irg.NEG) )
# 3850 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 909 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.AND) )
# 3858 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 911 "parser.mly"
  ( handle_expr (fun _ -> Sem.get_binop _1 _3 Irg.OR) )
# 3866 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 913 "parser.mly"
  ( _2 )
# 3873 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 915 "parser.mly"
  ( syntax_error "no expression after '('" )
# 3879 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 917 "parser.mly"
  ( syntax_error "unclosed '('" )
# 3886 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 919 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_if_expr _2 _4 _6) )
# 3895 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 921 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_if_expr _2 _4 _6) )
# 3904 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 923 "parser.mly"
  ( syntax_error "malformed if expression" )
# 3910 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'CaseExprBody) in
    Obj.repr(
# 925 "parser.mly"
  ( handle_expr (fun _ -> Sem.make_switch_expr _3 (fst _6) (snd _6)) )
# 3918 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 927 "parser.mly"
  ( syntax_error "malformed switch expression" )
# 3924 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Constant) in
    Obj.repr(
# 929 "parser.mly"
  ( eline (Irg.CONST (fst _1, snd _1)) )
# 3931 "parser.ml"
               : 'Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 935 "parser.mly"
  ( (Irg.FLOAT(23, 9), Irg.FIXED_CONST  _1) )
# 3938 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 938 "parser.mly"
  ( (Irg.CARD 32, Irg.CARD_CONST _1) )
# 3945 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int64.t) in
    Obj.repr(
# 940 "parser.mly"
  ( (Irg.CARD 64, Irg.CARD_CONST_64 _1) )
# 3952 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t * int) in
    Obj.repr(
# 942 "parser.mly"
  ( (Irg.CARD (snd _1), Irg.CARD_CONST (fst _1)) )
# 3959 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int64.t * int) in
    Obj.repr(
# 944 "parser.mly"
  ( (Irg.CARD (snd _1), Irg.CARD_CONST_64 (fst _1)) )
# 3966 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 946 "parser.mly"
  (
			if  (Irg.is_defined_canon _1) then
				(Sem.test_canonical _1;
				let e = Irg.get_canon _1 in
					(e.Irg.type_res, Irg.CANON(_1)))
			else
				(Irg.STRING, Irg.STRING_CONST(_1))
		)
# 3980 "parser.ml"
               : 'Constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 961 "parser.mly"
  ( Sem.make_ref _1 )
# 3987 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 963 "parser.mly"
  ( eline (Sem.get_unop _2 Irg.NEG) )
# 3994 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 965 "parser.mly"
  ( _2 )
# 4001 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 967 "parser.mly"
  ( eline (Sem.get_unop _2 Irg.BIN_NOT) )
# 4008 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 969 "parser.mly"
  ( eline (Sem.get_binop _1 _3 Irg.ADD) )
# 4016 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 971 "parser.mly"
  ( eline (Sem.get_binop _1 _3 Irg.SUB) )
# 4024 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 973 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.MUL) )
# 4032 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 975 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.DIV) )
# 4040 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 977 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.MOD) )
# 4048 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 979 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.EXP) )
# 4056 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 981 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_AND) )
# 4064 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 983 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_OR) )
# 4072 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Bit_Expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Bit_Expr) in
    Obj.repr(
# 985 "parser.mly"
  ( eline(Sem.get_binop _1 _3 Irg.BIN_XOR) )
# 4080 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Bit_Expr) in
    Obj.repr(
# 987 "parser.mly"
  ( _2 )
# 4087 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 989 "parser.mly"
  ( eline (Irg.CONST (Irg.FIX(8,24),Irg.FIXED_CONST _1)) )
# 4094 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Int32.t) in
    Obj.repr(
# 991 "parser.mly"
  ( eline (Irg.CONST (Irg.CARD 32,Irg.CARD_CONST _1)) )
# 4101 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 993 "parser.mly"
  (
			if  (Irg.is_defined_canon _1) then
				(Sem.test_canonical _1;
				let e = Irg.get_canon _1 in
					eline (Irg.CONST (e.Irg.type_res, Irg.CANON(_1))))
			else
				eline (Irg.CONST (Irg.STRING, Irg.STRING_CONST(_1)))
		)
# 4115 "parser.ml"
               : 'Bit_Expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprList) in
    Obj.repr(
# 1005 "parser.mly"
              ( (_1,Irg.NONE) )
# 4122 "parser.ml"
               : 'CaseExprBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'OptCaseExprList) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ExprDefault) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'OptCaseExprList) in
    Obj.repr(
# 1006 "parser.mly"
                                              ( (_1@_3,_2) )
# 4131 "parser.ml"
               : 'CaseExprBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 1010 "parser.mly"
            ( [] )
# 4137 "parser.ml"
               : 'OptCaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprList) in
    Obj.repr(
# 1011 "parser.mly"
               ( _1 )
# 4144 "parser.ml"
               : 'OptCaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprStat) in
    Obj.repr(
# 1015 "parser.mly"
              ( [_1] )
# 4151 "parser.ml"
               : 'CaseExprList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'CaseExprList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'CaseExprStat) in
    Obj.repr(
# 1016 "parser.mly"
                              ( _2::_1 )
# 4159 "parser.ml"
               : 'CaseExprList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 1020 "parser.mly"
                      ( (_2,_4) )
# 4167 "parser.ml"
               : 'CaseExprStat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Expr) in
    Obj.repr(
# 1024 "parser.mly"
                    ( _3 )
# 4174 "parser.ml"
               : 'ExprDefault))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesOrSequence) in
    Obj.repr(
# 1039 "parser.mly"
                ( )
# 4181 "parser.ml"
               : 'UsesDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesDef) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesOrSequence) in
    Obj.repr(
# 1040 "parser.mly"
                               ( )
# 4189 "parser.ml"
               : 'UsesDef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 1044 "parser.mly"
               ( )
# 4196 "parser.ml"
               : 'UsesOrSequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesOrSequence) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 1045 "parser.mly"
                                 ( )
# 4204 "parser.ml"
               : 'UsesOrSequence))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIndirectAtom) in
    Obj.repr(
# 1049 "parser.mly"
                  ( )
# 4211 "parser.ml"
               : 'UsesIfAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'UsesIfAtom) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'OptionalElseAtom) in
    Obj.repr(
# 1050 "parser.mly"
                                                 ( )
# 4220 "parser.ml"
               : 'UsesIfAtom))
; (fun __caml_parser_env ->
    Obj.repr(
# 1054 "parser.mly"
             ( )
# 4226 "parser.ml"
               : 'OptionalElseAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesIfAtom) in
    Obj.repr(
# 1055 "parser.mly"
                  ( )
# 4233 "parser.ml"
               : 'OptionalElseAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesCondAtom) in
    Obj.repr(
# 1059 "parser.mly"
              ( )
# 4240 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 1060 "parser.mly"
                ( )
# 4247 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'UsesDef) in
    Obj.repr(
# 1061 "parser.mly"
                        ( )
# 4254 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'UsesLocationList) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 1062 "parser.mly"
                                      ( )
# 4262 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'UsesLocationList) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'UsesDef) in
    Obj.repr(
# 1063 "parser.mly"
                                                ( )
# 4270 "parser.ml"
               : 'UsesIndirectAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesAndAtom) in
    Obj.repr(
# 1067 "parser.mly"
             ( )
# 4277 "parser.ml"
               : 'UsesCondAtom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'UsesAndAtom) in
    Obj.repr(
# 1068 "parser.mly"
                                 ( )
# 4285 "parser.ml"
               : 'UsesCondAtom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'UsesLocationList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionList) in
    Obj.repr(
# 1072 "parser.mly"
                                   ( )
# 4293 "parser.ml"
               : 'UsesAndAtom))
; (fun __caml_parser_env ->
    Obj.repr(
# 1076 "parser.mly"
              ( )
# 4299 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ActionTimeList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalAction) in
    Obj.repr(
# 1077 "parser.mly"
                                ( )
# 4307 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'TimeActionList) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'OptionalTime) in
    Obj.repr(
# 1078 "parser.mly"
                               ( )
# 4315 "parser.ml"
               : 'UsesActionList))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 1082 "parser.mly"
                          ( )
# 4322 "parser.ml"
               : 'ActionTimeList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'ActionTimeList) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'UsesActionAttr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 1083 "parser.mly"
                                                                ( )
# 4331 "parser.ml"
               : 'ActionTimeList))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 1087 "parser.mly"
                      ( )
# 4338 "parser.ml"
               : 'TimeActionList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'TimeActionList) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 1088 "parser.mly"
                                                                ( )
# 4347 "parser.ml"
               : 'TimeActionList))
; (fun __caml_parser_env ->
    Obj.repr(
# 1092 "parser.mly"
             ( )
# 4353 "parser.ml"
               : 'OptionalAction))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'UsesActionAttr) in
    Obj.repr(
# 1093 "parser.mly"
                       ( )
# 4360 "parser.ml"
               : 'OptionalAction))
; (fun __caml_parser_env ->
    Obj.repr(
# 1097 "parser.mly"
             ( )
# 4366 "parser.ml"
               : 'OptionalTime))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Expr) in
    Obj.repr(
# 1098 "parser.mly"
                           ( )
# 4373 "parser.ml"
               : 'OptionalTime))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 1102 "parser.mly"
      ( )
# 4380 "parser.ml"
               : 'UsesActionAttr))
; (fun __caml_parser_env ->
    Obj.repr(
# 1103 "parser.mly"
            ( )
# 4386 "parser.ml"
               : 'UsesActionAttr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'UsesLocation) in
    Obj.repr(
# 1107 "parser.mly"
              ( )
# 4393 "parser.ml"
               : 'UsesLocationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'UsesLocationList) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'UsesLocation) in
    Obj.repr(
# 1108 "parser.mly"
                                         ( )
# 4401 "parser.ml"
               : 'UsesLocationList))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Opt_Bit_Optr) in
    Obj.repr(
# 1112 "parser.mly"
                 ( )
# 4409 "parser.ml"
               : 'UsesLocation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'Expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'Opt_SecDim) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Opt_Bit_Optr) in
    Obj.repr(
# 1113 "parser.mly"
                                                ( )
# 4419 "parser.ml"
               : 'UsesLocation))
; (fun __caml_parser_env ->
    Obj.repr(
# 1117 "parser.mly"
              ( )
# 4425 "parser.ml"
               : 'Opt_SecDim))
; (fun __caml_parser_env ->
    Obj.repr(
# 1118 "parser.mly"
                ( )
# 4431 "parser.ml"
               : 'Opt_SecDim))
(* Entry top *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let top (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
